<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title></title>
        <subtitle>欢迎来到licwuu的博客小站</subtitle>
        <icon>http://licwuu.github.io/blog/images/favicon.ico</icon>
        <link>http://licwuu.github.io/blog</link>
        <author>
          <name>licwuu</name>
        </author>
        <description>记录Bug</description>
        <language>zh-CN</language>
        <pubDate>Thu, 11 May 2023 08:33:39 +0000</pubDate>
        <lastBuildDate>Thu, 11 May 2023 08:33:39 +0000</lastBuildDate>
        <category term="关键词1" />
        <category term="关键词2" />
        <item>
            <guid isPermalink="true">http://licwuu.github.io/blog/hello-world/</guid>
            <title>Hello World</title>
            <link>http://licwuu.github.io/blog/hello-world/</link>
            <pubDate>Thu, 11 May 2023 08:33:39 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://licwuu.github.io/blog/JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</guid>
            <title>JSR303数据校验</title>
            <link>http://licwuu.github.io/blog/JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</link>
            <category term="default" scheme="http://licwuu.github.io/blog/categories/default/" />
            <category term="default" scheme="http://licwuu.github.io/blog/tags/default/" />
            <pubDate>Tue, 18 Oct 2022 14:25:43 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;什么是jrs303&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是jrs303&#34;&gt;#&lt;/a&gt; 什么是 JRS303&lt;/h2&gt;
&lt;p&gt;JRS303 是一种后端校验技术，是 JAVA EE 6 中的一项子规范，叫做 Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现，通常用于校验数据的合法性，使用非常简单。&lt;/p&gt;
&lt;h2 id=&#34;如何使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用&#34;&gt;#&lt;/a&gt; 如何使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用校验注解&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Java 中提供了一系列的校验方式，它这些校验方式在 “javax.validation.constraints” 包中，包括如下几种注解。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/cover/image-20221018224702539.png&#34; alt=&#34;image-20221018224702539&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://licwuu.github.io/blog/docker%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</guid>
            <title>docker安装常用软件</title>
            <link>http://licwuu.github.io/blog/docker%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</link>
            <category term="default" scheme="http://licwuu.github.io/blog/categories/default/" />
            <category term="default" scheme="http://licwuu.github.io/blog/tags/default/" />
            <pubDate>Sat, 15 Oct 2022 14:01:53 +0000</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://licwuu.github.io/blog/docker%E5%AD%A6%E4%B9%A0/</guid>
            <title>Docker学习</title>
            <link>http://licwuu.github.io/blog/docker%E5%AD%A6%E4%B9%A0/</link>
            <category term="学习笔记" scheme="http://licwuu.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" />
            <category term="docker" scheme="http://licwuu.github.io/blog/tags/docker/" />
            <pubDate>Sat, 15 Oct 2022 13:22:31 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1初识docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1初识docker&#34;&gt;#&lt;/a&gt; 1. 初识 Docker&lt;/h2&gt;
&lt;h3 id=&#34;11什么是docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11什么是docker&#34;&gt;#&lt;/a&gt; 1.1. 什么是 Docker&lt;/h3&gt;
&lt;p&gt;微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。&lt;/li&gt;
&lt;li&gt;在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;111应用部署的环境问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111应用部署的环境问题&#34;&gt;#&lt;/a&gt; 1.1.1. 应用部署的环境问题&lt;/h4&gt;
&lt;p&gt;大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;依赖关系复杂，容易出现兼容性问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发、测试、生产环境有差异&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731141907366.png&#34; alt=&#34;image-20210731141907366&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例如一个项目中，部署时需要依赖于 node.js、Redis、RabbitMQ、MySQL 等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。&lt;/p&gt;
&lt;h4 id=&#34;112docker解决依赖兼容问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#112docker解决依赖兼容问题&#34;&gt;#&lt;/a&gt; 1.1.2.Docker 解决依赖兼容问题&lt;/h4&gt;
&lt;p&gt;而 Docker 确巧妙的解决了这些问题，Docker 是如何实现的呢？&lt;/p&gt;
&lt;p&gt;Docker 为了解决依赖的兼容问题的，采用了两个手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将应用的 Libs（函数库）、Deps（依赖）、配置与应用一起打包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将每个应用放到一个隔离&lt;strong&gt;容器&lt;/strong&gt;去运行，避免互相干扰&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731142219735.png&#34; alt=&#34;image-20210731142219735&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样打包好的应用包中，既包含应用本身，也保护应用所需要的 Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。&lt;/p&gt;
&lt;p&gt;虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？&lt;/p&gt;
&lt;h4 id=&#34;113docker解决操作系统环境差异&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#113docker解决操作系统环境差异&#34;&gt;#&lt;/a&gt; 1.1.3.Docker 解决操作系统环境差异&lt;/h4&gt;
&lt;p&gt;要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个 Ubuntu 操作系统为例，结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731143401460.png&#34; alt=&#34;image-20210731143401460&#34; /&gt;&lt;/p&gt;
&lt;p&gt;结构包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件：例如 CPU、内存、磁盘等&lt;/li&gt;
&lt;li&gt;系统内核：所有 Linux 发行版的内核都是 Linux，例如 CentOS、Ubuntu、Fedora 等。内核可以与计算机硬件交互，对外提供&lt;strong&gt;内核指令&lt;/strong&gt;，用于操作计算机硬件。&lt;/li&gt;
&lt;li&gt;系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用于计算机交互的流程如下：&lt;/p&gt;
&lt;p&gt;1）应用调用操作系统应用（函数库），实现各种功能&lt;/p&gt;
&lt;p&gt;2）系统函数库是对内核指令集的封装，会调用内核指令&lt;/p&gt;
&lt;p&gt;3）内核指令操作计算机硬件&lt;/p&gt;
&lt;p&gt;Ubuntu 和 CentOSpringBoot 都是基于 Linux 内核，无非是系统应用不同，提供的函数库有差异：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731144304990.png&#34; alt=&#34;image-20210731144304990&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时，如果将一个 Ubuntu 版本的 MySQL 应用安装到 CentOS 系统，MySQL 在调用 Ubuntu 函数库时，会发现找不到或者不匹配，就会报错了：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731144458680.png&#34; alt=&#34;image-20210731144458680&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Docker 如何解决不同系统环境的问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 将用户程序与所需要调用的系统 (比如 Ubuntu) 函数库一起打包&lt;/li&gt;
&lt;li&gt;Docker 运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的 Linux 内核来运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731144820638.png&#34; alt=&#34;image-20210731144820638&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;114小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#114小结&#34;&gt;#&lt;/a&gt; 1.1.4. 小结&lt;/h4&gt;
&lt;p&gt;Docker 如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 允许开发中将应用、依赖、函数库、配置一起&lt;strong&gt;打包&lt;/strong&gt;，形成可移植镜像&lt;/li&gt;
&lt;li&gt;Docker 应用运行在容器中，使用沙箱机制，相互&lt;strong&gt;隔离&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 如何解决开发、测试、生产环境有差异的问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 镜像中包含完整运行环境，包括系统函数库，仅依赖系统的 Linux 内核，因此可以在任意 Linux 操作系统上运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 是一个快速交付应用、运行应用的技术，具备下列优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意 Linux 操作系统&lt;/li&gt;
&lt;li&gt;运行时利用沙箱机制形成隔离容器，各个应用互不干扰&lt;/li&gt;
&lt;li&gt;启动、移除都可以通过一行命令完成，方便快捷&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12docker和虚拟机的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12docker和虚拟机的区别&#34;&gt;#&lt;/a&gt; 1.2.Docker 和虚拟机的区别&lt;/h3&gt;
&lt;p&gt;Docker 可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。&lt;/p&gt;
&lt;p&gt;两者有什么差异呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟机&lt;/strong&gt;（virtual machine）是在操作系统中&lt;strong&gt;模拟&lt;/strong&gt;硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的 Ubuntu 应用了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; 仅仅是封装函数库，并没有模拟完整的操作系统，如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731145914960.png&#34; alt=&#34;image-20210731145914960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对比来看：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731152243765.png&#34; alt=&#34;image-20210731152243765&#34; /&gt;&lt;/p&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;p&gt;Docker 和虚拟机的差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker 是一个系统进程；虚拟机是在操作系统中的操作系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker 体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13docker架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13docker架构&#34;&gt;#&lt;/a&gt; 1.3.Docker 架构&lt;/h3&gt;
&lt;h4 id=&#34;131镜像和容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#131镜像和容器&#34;&gt;#&lt;/a&gt; 1.3.1. 镜像和容器&lt;/h4&gt;
&lt;p&gt;Docker 中有几个重要的概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;镜像（Image）&lt;/strong&gt;：Docker 将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器（Container）&lt;/strong&gt;：镜像中的应用程序运行后形成的进程就是&lt;strong&gt;容器&lt;/strong&gt;，只是 Docker 会给容器进程做隔离，对外不可见。&lt;/p&gt;
&lt;p&gt;一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的&lt;strong&gt;文件&lt;/strong&gt;。只有运行时，才会加载到内存，形成进程。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;镜像&lt;/strong&gt;，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器&lt;/strong&gt;呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731153059464.png&#34; alt=&#34;image-20210731153059464&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例如你下载了一个 QQ，如果我们将 QQ 在磁盘上的运行&lt;strong&gt;文件&lt;/strong&gt;及其运行的操作系统依赖打包，形成 QQ 镜像。然后你可以启动多次，双开、甚至三开 QQ，跟多个妹子聊天。&lt;/p&gt;
&lt;h4 id=&#34;132dockerhub&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#132dockerhub&#34;&gt;#&lt;/a&gt; 1.3.2.DockerHub&lt;/h4&gt;
&lt;p&gt;开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如 Redis、MySQL 镜像放到网络上，共享使用，就像 GitHub 的代码共享一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DockerHub：DockerHub 是一个官方的 Docker 镜像的托管平台。这样的平台称为 Docker Registry。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;国内也有类似于 DockerHub 的公开服务，比如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jLjE2M3l1bi5jb20vaHVi&#34;&gt;网易云镜像服务&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jci5jb25zb2xlLmFsaXl1bi5jb20v&#34;&gt;阿里云镜像库&lt;/span&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们一方面可以将自己的镜像共享到 DockerHub，另一方面也可以从 DockerHub 拉取镜像：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731153743354.png&#34; alt=&#34;image-20210731153743354&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;133docker架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#133docker架构&#34;&gt;#&lt;/a&gt; 1.3.3.Docker 架构&lt;/h4&gt;
&lt;p&gt;我们要使用 Docker 来操作镜像、容器，就必须要安装 Docker。&lt;/p&gt;
&lt;p&gt;Docker 是一个 CS 架构的程序，由两部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务端 (server)：Docker 守护进程，负责处理 Docker 指令，管理镜像、容器等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端 (client)：通过命令或 RestAPI 向 Docker 服务端发送指令。可以在本地或远程向服务端发送指令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731154257653.png&#34; alt=&#34;image-20210731154257653&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;134小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#134小结&#34;&gt;#&lt;/a&gt; 1.3.4. 小结&lt;/h4&gt;
&lt;p&gt;镜像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将应用程序及其依赖、环境、配置打包在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像运行起来就是容器，一个镜像可以运行多个容器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker 结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务端：接收命令或远程请求，操作镜像或容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端：发送命令或者请求到 Docker 服务端&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DockerHub：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为 DockerRegistry&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14安装docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14安装docker&#34;&gt;#&lt;/a&gt; 1.4. 安装 Docker&lt;/h3&gt;
&lt;p&gt;企业部署一般都是采用 Linux 操作系统，而其中又数 CentOS 发行版占比最多，因此我们在 CentOS 下安装 Docker。参考课前资料中的文档：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731155002425.png&#34; alt=&#34;image-20210731155002425&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2docker的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2docker的基本操作&#34;&gt;#&lt;/a&gt; 2.Docker 的基本操作&lt;/h2&gt;
&lt;h3 id=&#34;21镜像操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21镜像操作&#34;&gt;#&lt;/a&gt; 2.1. 镜像操作&lt;/h3&gt;
&lt;h4 id=&#34;211镜像名称&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#211镜像名称&#34;&gt;#&lt;/a&gt; 2.1.1. 镜像名称&lt;/h4&gt;
&lt;p&gt;首先来看下镜像的名称组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜名称一般分两部分组成：[repository]:[tag]。&lt;/li&gt;
&lt;li&gt;在没有指定 tag 时，默认是 latest，代表最新版本的镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731155141362.png&#34; alt=&#34;image-20210731155141362&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里的 mysql 就是 repository，5.7 就是 tag，合一起就是镜像名称，代表 5.7 版本的 MySQL 镜像。&lt;/p&gt;
&lt;h4 id=&#34;212镜像命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#212镜像命令&#34;&gt;#&lt;/a&gt; 2.1.2. 镜像命令&lt;/h4&gt;
&lt;p&gt;常见的镜像操作命令如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731155649535.png&#34; alt=&#34;image-20210731155649535&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;213案例1-拉取-查看镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#213案例1-拉取-查看镜像&#34;&gt;#&lt;/a&gt; 2.1.3. 案例 1 - 拉取、查看镜像&lt;/h4&gt;
&lt;p&gt;需求：从 DockerHub 中拉取一个 nginx 镜像并查看&lt;/p&gt;
&lt;p&gt;1）首先去镜像仓库搜索 nginx 镜像，比如&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=&#34;&gt; DockerHub&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731155844368.png&#34; alt=&#34;image-20210731155844368&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731155856199.png&#34; alt=&#34;image-20210731155856199&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3）通过命令：docker images 查看拉取到的镜像&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731155903037.png&#34; alt=&#34;image-20210731155903037&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;214案例2-保存-导入镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#214案例2-保存-导入镜像&#34;&gt;#&lt;/a&gt; 2.1.4. 案例 2 - 保存、导入镜像&lt;/h4&gt;
&lt;p&gt;需求：利用 docker save 将 nginx 镜像导出磁盘，然后再通过 load 加载回来&lt;/p&gt;
&lt;p&gt;1）利用 docker xx --help 命令查看 docker save 和 docker load 的语法&lt;/p&gt;
&lt;p&gt;例如，查看 save 命令用法，可以输入命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; save &lt;span class=&#34;token parameter variable&#34;&gt;--help&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731161104732.png&#34; alt=&#34;image-20210731161104732&#34; /&gt;&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; save &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;保存的目标文件名称&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;镜像名称&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2）使用 docker save 导出镜像到磁盘&lt;/p&gt;
&lt;p&gt;运行命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; save &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; nginx.tar nginx:latest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结果如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731161354344.png&#34; alt=&#34;image-20210731161354344&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3）使用 docker load 加载镜像&lt;/p&gt;
&lt;p&gt;先删除本地的 nginx 镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; rmi nginx:latest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后运行命令，加载本地文件：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; load &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; nginx.tar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731161746245.png&#34; alt=&#34;image-20210731161746245&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;215练习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#215练习&#34;&gt;#&lt;/a&gt; 2.1.5. 练习&lt;/h4&gt;
&lt;p&gt;需求：去 DockerHub 搜索并拉取一个 Redis 镜像&lt;/p&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;p&gt;1）去 DockerHub 搜索 Redis 镜像&lt;/p&gt;
&lt;p&gt;2）查看 Redis 镜像的名称和版本&lt;/p&gt;
&lt;p&gt;3）利用 docker pull 命令拉取镜像&lt;/p&gt;
&lt;p&gt;4）利用 docker save 命令将 redis:latest 打包为一个 redis.tar 包&lt;/p&gt;
&lt;p&gt;5）利用 docker rmi 删除本地的 redis:latest&lt;/p&gt;
&lt;p&gt;6）利用 docker load 重新加载 redis.tar 文件&lt;/p&gt;
&lt;h3 id=&#34;22容器操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22容器操作&#34;&gt;#&lt;/a&gt; 2.2. 容器操作&lt;/h3&gt;
&lt;h4 id=&#34;221容器相关命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#221容器相关命令&#34;&gt;#&lt;/a&gt; 2.2.1. 容器相关命令&lt;/h4&gt;
&lt;p&gt;容器操作的命令如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731161950495.png&#34; alt=&#34;image-20210731161950495&#34; /&gt;&lt;/p&gt;
&lt;p&gt;容器保护三个状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行：进程正常运行&lt;/li&gt;
&lt;li&gt;暂停：进程暂停，CPU 不再运行，并不释放内存&lt;/li&gt;
&lt;li&gt;停止：进程终止，回收进程占用的内存、CPU 等资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker run：创建并运行一个容器，处于运行状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker pause：让一个运行的容器暂停&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker unpause：让一个容器从暂停状态恢复运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker stop：停止一个运行的容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker start：让一个停止的容器再次运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker rm：删除一个容器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;222案例-创建并运行一个容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#222案例-创建并运行一个容器&#34;&gt;#&lt;/a&gt; 2.2.2. 案例 - 创建并运行一个容器&lt;/h4&gt;
&lt;p&gt;创建并运行 nginx 容器的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; containerName &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;:80 &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;命令解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker run ：创建并运行一个容器&lt;/li&gt;
&lt;li&gt;--name : 给容器起一个名字，比如叫做 mn&lt;/li&gt;
&lt;li&gt;-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口&lt;/li&gt;
&lt;li&gt;-d：后台运行容器&lt;/li&gt;
&lt;li&gt;nginx：镜像名称，例如 nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的 &lt;code&gt;-p&lt;/code&gt;  参数，是将容器端口映射到宿主机端口。&lt;/p&gt;
&lt;p&gt;默认情况下，容器是隔离环境，我们直接访问宿主机的 80 端口，肯定访问不到容器中的 nginx。&lt;/p&gt;
&lt;p&gt;现在，将容器的 80 与宿主机的 80 关联起来，当我们访问宿主机的 80 端口时，就会被映射到容器的 80，这样就能访问到 nginx 了：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731163255863.png&#34; alt=&#34;image-20210731163255863&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;223案例-进入容器修改文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#223案例-进入容器修改文件&#34;&gt;#&lt;/a&gt; 2.2.3. 案例 - 进入容器，修改文件&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：进入 Nginx 容器，修改 HTML 文件内容，添加 “传智教育欢迎您”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：进入容器要用到 docker exec 命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1）进入容器。进入我们刚刚创建的 nginx 容器的命令为：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; mn &lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;命令解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker exec ：进入容器内部，执行一个命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mn ：要进入的容器的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bash：进入容器后执行的命令，bash 是一个 linux 终端交互命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2）进入 nginx 的 HTML 所在目录 /usr/share/nginx/html&lt;/p&gt;
&lt;p&gt;容器内部会模拟一个独立的 Linux 文件系统，看起来如同一个 linux 服务器一样：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731164159811.png&#34; alt=&#34;image-20210731164159811&#34; /&gt;&lt;/p&gt;
&lt;p&gt;nginx 的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的 html 文件。&lt;/p&gt;
&lt;p&gt;查看 DockerHub 网站中的 nginx 页面，可以知道 nginx 的 html 目录位置在 &lt;code&gt;/usr/share/nginx/html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们执行命令，进入该目录：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /usr/share/nginx/html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看目录下文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731164455818.png&#34; alt=&#34;image-20210731164455818&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3）修改 index.html 的内容&lt;/p&gt;
&lt;p&gt;容器内没有 vi 命令，无法直接修改，我们用下面的命令来修改：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;s#Welcome to nginx#传智教育欢迎您#g&#39;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;s#&amp;lt;head&gt;#&amp;lt;head&gt;&amp;lt;meta charset=&#34;utf-8&#34;&gt;#g&#39;&lt;/span&gt; index.html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在浏览器访问自己的虚拟机地址，例如我的是：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMTUwLjEwMQ==&#34;&gt;http://192.168.150.101&lt;/span&gt;，即可看到结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731164717604.png&#34; alt=&#34;image-20210731164717604&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;224小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#224小结&#34;&gt;#&lt;/a&gt; 2.2.4. 小结&lt;/h4&gt;
&lt;p&gt;docker run 命令的常见参数有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;--name：指定容器名称&lt;/li&gt;
&lt;li&gt;-p：指定端口映射&lt;/li&gt;
&lt;li&gt;-d：让容器后台运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看容器日志的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker logs&lt;/li&gt;
&lt;li&gt;添加 -f 参数可以持续查看日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看容器状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker ps&lt;/li&gt;
&lt;li&gt;docker ps -a 查看所有容器，包括已经停止的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23数据卷容器数据管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23数据卷容器数据管理&#34;&gt;#&lt;/a&gt; 2.3. 数据卷（容器数据管理）&lt;/h3&gt;
&lt;p&gt;在之前的 nginx 案例中，修改 nginx 的 html 页面时，需要进入 nginx 内部。并且因为没有编辑器，修改文件也很麻烦。&lt;/p&gt;
&lt;p&gt;这就是因为容器与数据（容器内文件）耦合带来的后果。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731172440275.png&#34; alt=&#34;image-20210731172440275&#34; /&gt;&lt;/p&gt;
&lt;p&gt;要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。&lt;/p&gt;
&lt;h4 id=&#34;231什么是数据卷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#231什么是数据卷&#34;&gt;#&lt;/a&gt; 2.3.1. 什么是数据卷&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731173541846.png&#34; alt=&#34;image-20210731173541846&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。&lt;/p&gt;
&lt;p&gt;这样，我们操作宿主机的 /var/lib/docker/volumes/html 目录，就等于操作容器内的 /usr/share/nginx/html 目录了&lt;/p&gt;
&lt;h4 id=&#34;232数据集操作命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#232数据集操作命令&#34;&gt;#&lt;/a&gt; 2.3.2. 数据集操作命令&lt;/h4&gt;
&lt;p&gt;数据卷操作的基本语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; volume &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;COMMAND&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;docker volume 命令是数据卷操作，根据命令后跟随的 command 来确定下一步的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create 创建一个 volume&lt;/li&gt;
&lt;li&gt;inspect 显示一个或多个 volume 的信息&lt;/li&gt;
&lt;li&gt;ls 列出所有的 volume&lt;/li&gt;
&lt;li&gt;prune 删除未使用的 volume&lt;/li&gt;
&lt;li&gt;rm 删除一个或多个指定的 volume&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;233创建和查看数据卷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#233创建和查看数据卷&#34;&gt;#&lt;/a&gt; 2.3.3. 创建和查看数据卷&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建一个数据卷，并查看数据卷在宿主机的目录位置&lt;/p&gt;
&lt;p&gt;① 创建数据卷&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; volume create html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;② 查看所有数据&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; volume &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731173746910.png&#34; alt=&#34;image-20210731173746910&#34; /&gt;&lt;/p&gt;
&lt;p&gt;③ 查看数据卷详细信息卷&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; volume inspect html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731173809877.png&#34; alt=&#34;image-20210731173809877&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到，我们创建的 html 这个数据卷关联的宿主机目录为 &lt;code&gt;/var/lib/docker/volumes/html/_data&lt;/code&gt;  目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;数据卷的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据卷操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker volume create：创建数据卷&lt;/li&gt;
&lt;li&gt;docker volume ls：查看所有数据卷&lt;/li&gt;
&lt;li&gt;docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置&lt;/li&gt;
&lt;li&gt;docker volume rm：删除指定数据卷&lt;/li&gt;
&lt;li&gt;docker volume prune：删除所有未使用的数据卷&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;234挂载数据卷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#234挂载数据卷&#34;&gt;#&lt;/a&gt; 2.3.4. 挂载数据卷&lt;/h4&gt;
&lt;p&gt;我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; mn &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; html:/root/html &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;:80&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  nginx &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里的 - v 就是挂载数据卷的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v html:/root/htm&lt;/code&gt;  ：把 html 数据卷挂载到容器内的 /root/html 这个目录中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;235案例-给nginx挂载数据卷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#235案例-给nginx挂载数据卷&#34;&gt;#&lt;/a&gt; 2.3.5. 案例 - 给 nginx 挂载数据卷&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建一个 nginx 容器，修改容器内的 html 目录内的 index.html 内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;：上个案例中，我们进入 nginx 容器内部，已经知道 nginx 的 html 目录所在位置 /usr/share/nginx/html ，我们需要把这个目录挂载到 html 这个数据卷上，方便操作其中的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：运行容器时使用 -v 参数挂载数据卷&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;① 创建容器并挂载数据卷到容器内的 HTML 目录&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; mn &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; html:/usr/share/nginx/html &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;:80 &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;② 进入 html 数据卷所在位置，并修改 HTML 内容&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 查看 html 数据卷的位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; volume inspect html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 进入该目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /var/lib/docker/volumes/html/_data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 修改文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vi&lt;/span&gt; index.html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;236案例-给mysql挂载本地目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#236案例-给mysql挂载本地目录&#34;&gt;#&lt;/a&gt; 2.3.6. 案例 - 给 MySQL 挂载本地目录&lt;/h4&gt;
&lt;p&gt;容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带数据卷模式：宿主机目录 --&amp;gt; 数据卷 ---&amp;gt; 容器内目录&lt;/li&gt;
&lt;li&gt;直接挂载模式：宿主机目录 ---&amp;gt; 容器内目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731175155453.png&#34; alt=&#34;image-20210731175155453&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;目录挂载与数据卷挂载的语法是类似的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v [宿主机目录]:[容器内目录]&lt;/li&gt;
&lt;li&gt;-v [宿主机文件]:[容器内文件]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：创建并运行一个 MySQL 容器，将宿主机目录直接挂载到容器&lt;/p&gt;
&lt;p&gt;实现思路如下：&lt;/p&gt;
&lt;p&gt;1）在将课前资料中的 mysql.tar 文件上传到虚拟机，通过 load 命令加载为镜像&lt;/p&gt;
&lt;p&gt;2）创建目录 /tmp/mysql/data&lt;/p&gt;
&lt;p&gt;3）创建目录 /tmp/mysql/conf，将课前资料提供的 hmy.cnf 文件上传到 /tmp/mysql/conf&lt;/p&gt;
&lt;p&gt;4）去 DockerHub 查阅资料，创建并运行 MySQL 容器，要求：&lt;/p&gt;
&lt;p&gt;① 挂载 /tmp/mysql/data 到 mysql 容器内数据存储目录&lt;/p&gt;
&lt;p&gt;② 挂载 /tmp/mysql/conf/hmy.cnf 到 mysql 容器的配置文件&lt;/p&gt;
&lt;p&gt;③ 设置 MySQL 密码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight docker&#34;&gt;&lt;figcaption data-lang=&#34;docker&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker run \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--name contain-mysql \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-e MYSQL_ROOT_PASSWORD=123456 \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-p 3306:3306 \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-v /tmp/mysql/conf/hmy.conf:/etc/mysql/conf.d/hmy.conf \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-v /tmp/mysql/data:/var/lib/mysql \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-d \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql:5.7.25&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;237小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#237小结&#34;&gt;#&lt;/a&gt; 2.3.7. 小结&lt;/h4&gt;
&lt;p&gt;docker run 的命令中通过 -v 参数挂载文件或目录到容器中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v volume 名称：容器内目录&lt;/li&gt;
&lt;li&gt;-v 宿主机文件：容器内文&lt;/li&gt;
&lt;li&gt;-v 宿主机目录：容器内目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据卷挂载与目录直接挂载的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据卷挂载耦合度低，由 docker 来管理目录，但是目录较深，不好找&lt;/li&gt;
&lt;li&gt;目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3dockerfile自定义镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3dockerfile自定义镜像&#34;&gt;#&lt;/a&gt; 3.Dockerfile 自定义镜像&lt;/h2&gt;
&lt;p&gt;常见的镜像在 DockerHub 就能找到，但是我们自己写的项目就必须自己构建镜像了。&lt;/p&gt;
&lt;p&gt;而要自定义镜像，就必须先了解镜像的结构才行。&lt;/p&gt;
&lt;h3 id=&#34;31镜像结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31镜像结构&#34;&gt;#&lt;/a&gt; 3.1. 镜像结构&lt;/h3&gt;
&lt;p&gt;镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。&lt;/p&gt;
&lt;p&gt;我们以 MySQL 为例，来看看镜像的组成结构：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731175806273.png&#34; alt=&#34;image-20210731175806273&#34; /&gt;&lt;/p&gt;
&lt;p&gt;简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。&lt;/p&gt;
&lt;p&gt;我们要构建镜像，其实就是实现上述打包的过程。&lt;/p&gt;
&lt;h3 id=&#34;32dockerfile语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32dockerfile语法&#34;&gt;#&lt;/a&gt; 3.2.Dockerfile 语法&lt;/h3&gt;
&lt;p&gt;构建自定义的镜像时，并不需要一个个文件去拷贝，打包。&lt;/p&gt;
&lt;p&gt;我们只需要告诉 Docker，我们的镜像的组成，需要哪些 BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来 Docker 会帮助我们构建镜像。&lt;/p&gt;
&lt;p&gt;而描述上述信息的文件就是 Dockerfile 文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; 就是一个文本文件，其中包含一个个的&lt;strong&gt;指令 (Instruction)&lt;/strong&gt;，用指令来说明&lt;/p&gt;
&lt;p&gt;要执行什么操作来构建镜像。每一个指令都会形成一层 Layer。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731180321133.png&#34; alt=&#34;image-20210731180321133&#34; /&gt;&lt;/p&gt;
&lt;p&gt;更新详细语法说明，请参考官网文档： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9idWlsZGVy&#34;&gt;https://docs.docker.com/engine/reference/builder&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;33构建java项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33构建java项目&#34;&gt;#&lt;/a&gt; 3.3. 构建 Java 项目&lt;/h3&gt;
&lt;h4 id=&#34;331基于ubuntu构建java项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#331基于ubuntu构建java项目&#34;&gt;#&lt;/a&gt; 3.3.1. 基于 Ubuntu 构建 Java 项目&lt;/h4&gt;
&lt;p&gt;需求：基于 Ubuntu 镜像构建一个新镜像，运行一个 java 项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;步骤 1：新建一个空文件夹 docker-demo&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801101207444.png&#34; alt=&#34;image-20210801101207444&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 2：拷贝课前资料中的 docker-demo.jar 文件到 docker-demo 这个目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801101314816.png&#34; alt=&#34;image-20210801101314816&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 3：拷贝课前资料中的 jdk8.tar.gz 文件到 docker-demo 这个目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801101410200.png&#34; alt=&#34;image-20210801101410200&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 4：拷贝课前资料提供的 Dockerfile 到 docker-demo 这个目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801101455590.png&#34; alt=&#34;image-20210801101455590&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中的内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;figcaption data-lang=&#34;Docker&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 指定基础镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; ubuntu:16.04&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 配置环境变量，JDK 的安装目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;ENV&lt;/span&gt; JAVA_DIR=/usr/local&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 拷贝 jdk 和 java 项目的包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;COPY&lt;/span&gt; ./jdk8.tar.gz &lt;span class=&#34;token variable&#34;&gt;$JAVA_DIR&lt;/span&gt;/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;COPY&lt;/span&gt; ./docker-demo.jar /tmp/app.jar&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 安装 JDK&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;RUN&lt;/span&gt; cd &lt;span class=&#34;token variable&#34;&gt;$JAVA_DIR&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &amp;amp;&amp;amp; tar -xf ./jdk8.tar.gz &lt;span class=&#34;token operator&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &amp;amp;&amp;amp; mv ./jdk1.8.0_144 ./java8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 配置环境变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;ENV&lt;/span&gt; JAVA_HOME=&lt;span class=&#34;token variable&#34;&gt;$JAVA_DIR&lt;/span&gt;/java8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;ENV&lt;/span&gt; PATH=&lt;span class=&#34;token variable&#34;&gt;$PATH&lt;/span&gt;:&lt;span class=&#34;token variable&#34;&gt;$JAVA_HOME&lt;/span&gt;/bin&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 暴露端口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;EXPOSE&lt;/span&gt; 8090&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## 入口，java 项目的启动命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;ENTRYPOINT&lt;/span&gt; java -jar /tmp/app.jar&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 5：进入 docker-demo&lt;/p&gt;
&lt;p&gt;将准备好的 docker-demo 上传到虚拟机任意目录，然后进入 docker-demo 目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤 6：运行命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; build &lt;span class=&#34;token parameter variable&#34;&gt;-t&lt;/span&gt; javaweb:1.0 &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后访问 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMTUwLjEwMTo4MDkwL2hlbGxvL2NvdW50JUVGJUJDJThDJUU1JTg1JUI2JUU0JUI4JUFEJUU3JTlBJTg0aXAlRTYlOTQlQjklRTYlODglOTAlRTQlQkQlQTAlRTclOUElODQlRTglOTklOUElRTYlOEIlOUYlRTYlOUMlQkFpcA==&#34;&gt;http://192.168.150.101:8090/hello/count，其中的 ip 改成你的虚拟机 ip&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;332基于java8构建java项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#332基于java8构建java项目&#34;&gt;#&lt;/a&gt; 3.3.2. 基于 java8 构建 Java 项目&lt;/h4&gt;
&lt;p&gt;虽然我们可以基于 Ubuntu 基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。&lt;/p&gt;
&lt;p&gt;例如，构建 java 项目的镜像，可以在已经准备了 JDK 的基础镜像基础上构建。&lt;/p&gt;
&lt;p&gt;需求：基于 java:8-alpine 镜像，将一个 Java 项目构建为镜像&lt;/p&gt;
&lt;p&gt;实现思路如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;① 新建一个空的目录，然后在目录中新建一个文件，命名为 Dockerfile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;② 拷贝课前资料提供的 docker-demo.jar 到这个目录中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;③ 编写 Dockerfile 文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a ）基于 java:8-alpine 作为基础镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b ）将 app.jar 拷贝到镜像中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c ）暴露端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d ）编写入口 ENTRYPOINT&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;figcaption data-lang=&#34;Docker&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; java:8-alpine&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;COPY&lt;/span&gt; ./app.jar /tmp/app.jar&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;EXPOSE&lt;/span&gt; 8090&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;ENTRYPOINT&lt;/span&gt; java -jar /tmp/app.jar&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;④ 使用 docker build 命令构建镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⑤ 使用 docker run 创建容器并运行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;34小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34小结&#34;&gt;#&lt;/a&gt; 3.4. 小结&lt;/h3&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Dockerfile 的本质是一个文件，通过指令描述镜像的构建过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dockerfile 的第一行必须是 FROM，从一个基础镜像来构建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基础镜像可以是基本操作系统，如 Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4docker-compose&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4docker-compose&#34;&gt;#&lt;/a&gt; 4.Docker-Compose&lt;/h2&gt;
&lt;p&gt;Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731180921742.png&#34; alt=&#34;image-20210731180921742&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;41初识dockercompose&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41初识dockercompose&#34;&gt;#&lt;/a&gt; 4.1. 初识 DockerCompose&lt;/h3&gt;
&lt;p&gt;Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;version&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3.8&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; services&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  mysql&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    image&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; mysql&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.7&lt;/span&gt;.&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    environment&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     MYSQL_ROOT_PASSWORD&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    volumes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     - &lt;span class=&#34;token string&#34;&gt;&#34;/tmp/mysql/data:/var/lib/mysql&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     - &lt;span class=&#34;token string&#34;&gt;&#34;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  web&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; .&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ports&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     - &lt;span class=&#34;token string&#34;&gt;&#34;8090:8090&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的 Compose 文件就描述一个项目，其中包含两个容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql：一个基于 &lt;code&gt;mysql:5.7.25&lt;/code&gt;  镜像构建的容器，并且挂载了两个目录&lt;/li&gt;
&lt;li&gt;web：一个基于 &lt;code&gt;docker build&lt;/code&gt;  临时构建的镜像容器，映射端口时 8090&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DockerCompose 的详细语法参考官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9jb21wb3NlLWZpbGUv&#34;&gt;https://docs.docker.com/compose/compose-file/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其实 DockerCompose 文件可以看做是将多个 docker run 命令写到一个文件，只是语法稍有差异。&lt;/p&gt;
&lt;h3 id=&#34;42安装dockercompose&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42安装dockercompose&#34;&gt;#&lt;/a&gt; 4.2. 安装 DockerCompose&lt;/h3&gt;
&lt;p&gt;参考课前资料&lt;/p&gt;
&lt;h3 id=&#34;43部署微服务集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43部署微服务集群&#34;&gt;#&lt;/a&gt; 4.3. 部署微服务集群&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：将之前学习的 cloud-demo 微服务集群利用 DockerCompose 部署&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现思路&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;① 查看课前资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件&lt;/p&gt;
&lt;p&gt;② 修改自己的 cloud-demo 项目，将数据库、nacos 地址都命名为 docker-compose 中的服务名&lt;/p&gt;
&lt;p&gt;③ 使用 maven 打包工具，将项目中的每个微服务都打包为 app.jar&lt;/p&gt;
&lt;p&gt;④ 将打包好的 app.jar 拷贝到 cloud-demo 中的每一个对应的子目录中&lt;/p&gt;
&lt;p&gt;⑤ 将 cloud-demo 上传至虚拟机，利用 docker-compose up -d 来部署&lt;/p&gt;
&lt;h4 id=&#34;431compose文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#431compose文件&#34;&gt;#&lt;/a&gt; 4.3.1.compose 文件&lt;/h4&gt;
&lt;p&gt;查看课前资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件，而且每个微服务都准备了一个独立的目录：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210731181341330.png&#34; alt=&#34;image-20210731181341330&#34; /&gt;&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3.2&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nacos/nacos&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;MODE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; standalone&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;8848:8848&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;5.7.25&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;$PWD/mysql/data:/var/lib/mysql&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;$PWD/mysql/conf:/etc/mysql/conf.d/&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;userservice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; ./user&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;orderservice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; ./order&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;gateway&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; ./gateway&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;10010:10010&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到，其中包含 5 个 service 服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nacos&lt;/code&gt; ：作为注册中心和配置中心
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image: nacos/nacos-server&lt;/code&gt; ： 基于 nacos/nacos-server 镜像构建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt; ：环境变量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MODE: standalone&lt;/code&gt; ：单点模式启动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt; ：端口映射，这里暴露了 8848 端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql&lt;/code&gt; ：数据库
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;image: mysql:5.7.25&lt;/code&gt; ：镜像版本是 mysql:5.7.25&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt; ：环境变量
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MYSQL_ROOT_PASSWORD: 123&lt;/code&gt; ：设置数据库 root 账户的密码为 123&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt; ：数据卷挂载，这里挂载了 mysql 的 data、conf 目录，其中有我提前准备好的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userservice&lt;/code&gt; 、 &lt;code&gt;orderservice&lt;/code&gt; 、 &lt;code&gt;gateway&lt;/code&gt; ：都是基于 Dockerfile 临时构建的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看 mysql 目录，可以看到其中已经准备好了 cloud_order、cloud_user 表：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801095205034.png&#34; alt=&#34;image-20210801095205034&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看微服务目录，可以看到都包含 Dockerfile 文件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801095320586.png&#34; alt=&#34;image-20210801095320586&#34; /&gt;&lt;/p&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;figcaption data-lang=&#34;Docker&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; java:8-alpine&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;COPY&lt;/span&gt; ./app.jar /tmp/app.jar&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;ENTRYPOINT&lt;/span&gt; java -jar /tmp/app.jar&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;432修改微服务配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#432修改微服务配置&#34;&gt;#&lt;/a&gt; 4.3.2. 修改微服务配置&lt;/h4&gt;
&lt;p&gt;因为微服务将来要部署为 docker 容器，而容器之间互联不是通过 IP 地址，而是通过容器名。这里我们将 order-service、user-service、gateway 服务的 mysql、nacos 地址都修改为基于容器名的访问。&lt;/p&gt;
&lt;p&gt;如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;datasource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; jdbc&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;3306/cloud_order&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;useSSL=false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;driver-class-name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; com.mysql.jdbc.Driver&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; orderservice&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;cloud&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;nacos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;server-addr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nacos&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8848&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;## nacos 服务地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;433打包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#433打包&#34;&gt;#&lt;/a&gt; 4.3.3. 打包&lt;/h4&gt;
&lt;p&gt;接下来需要将我们的每个微服务都打包。因为之前查看到 Dockerfile 中的 jar 包名称都是 app.jar，因此我们的每个微服务都需要用这个名称。&lt;/p&gt;
&lt;p&gt;可以通过修改 pom.xml 中的打包名称来实现，每个微服务都需要修改：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 服务打包的最终名称 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;finalName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;app&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;finalName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;plugins&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;plugins&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打包后：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801095951030.png&#34; alt=&#34;image-20210801095951030&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;434拷贝jar包到部署目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#434拷贝jar包到部署目录&#34;&gt;#&lt;/a&gt; 4.3.4. 拷贝 jar 包到部署目录&lt;/h4&gt;
&lt;p&gt;编译打包好的 app.jar 文件，需要放到 Dockerfile 的同级目录中。注意：每个微服务的 app.jar 放到与服务名称对应的目录，别搞错了。&lt;/p&gt;
&lt;p&gt;user-service：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801100201253.png&#34; alt=&#34;image-20210801100201253&#34; /&gt;&lt;/p&gt;
&lt;p&gt;order-service：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801100231495.png&#34; alt=&#34;image-20210801100231495&#34; /&gt;&lt;/p&gt;
&lt;p&gt;gateway：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801100308102.png&#34; alt=&#34;image-20210801100308102&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;435部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#435部署&#34;&gt;#&lt;/a&gt; 4.3.5. 部署&lt;/h4&gt;
&lt;p&gt;最后，我们需要将文件整个 cloud-demo 文件夹上传到虚拟机中，理由 DockerCompose 部署。&lt;/p&gt;
&lt;p&gt;上传到任意目录：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/docker/image-20210801100955653.png&#34; alt=&#34;image-20210801100955653&#34; /&gt;&lt;/p&gt;
&lt;p&gt;部署：&lt;/p&gt;
&lt;p&gt;进入 cloud-demo 目录，然后运行下面的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; up &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;5docker镜像仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5docker镜像仓库&#34;&gt;#&lt;/a&gt; 5.Docker 镜像仓库&lt;/h2&gt;
&lt;h3 id=&#34;51搭建私有镜像仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51搭建私有镜像仓库&#34;&gt;#&lt;/a&gt; 5.1. 搭建私有镜像仓库&lt;/h3&gt;
&lt;p&gt;参考课前资料《&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1DZW50T1M3RG9ja2VyLWhtMHk0NjcwYy5tZA==&#34;&gt;CentOS7 安装 Docker.md&lt;/span&gt;》&lt;/p&gt;
&lt;h3 id=&#34;52推送-拉取镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52推送-拉取镜像&#34;&gt;#&lt;/a&gt; 5.2. 推送、拉取镜像&lt;/h3&gt;
&lt;p&gt;推送镜像到私有镜像服务必须先 tag，步骤如下：&lt;/p&gt;
&lt;p&gt;① 重新 tag 本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; tag nginx:latest &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.150.101:8080/nginx:1.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;② 推送镜像&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; push &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.150.101:8080/nginx:1.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;③ 拉取镜像&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.150.101:8080/nginx:1.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://licwuu.github.io/blog/docker%E5%AE%89%E8%A3%85/</guid>
            <title>docker安装</title>
            <link>http://licwuu.github.io/blog/docker%E5%AE%89%E8%A3%85/</link>
            <category term="软件安装" scheme="http://licwuu.github.io/blog/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/" />
            <category term="docker" scheme="http://licwuu.github.io/blog/tags/docker/" />
            <pubDate>Sat, 15 Oct 2022 12:40:02 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;docker安装centos&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker安装centos&#34;&gt;#&lt;/a&gt; docker 安装 (centos)&lt;/h2&gt;
&lt;p&gt;docker 引擎安装官网地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==&#34;&gt;Install Docker Engine on CentOS | Docker Documentation&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;手动安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手动安装&#34;&gt;#&lt;/a&gt; 手动安装&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 卸载旧版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; yum remove &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  docker-client &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  docker-client-latest &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  docker-common &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  docker-latest &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  docker-latest-logrotate &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  docker-logrotate &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                  docker-engine&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 安装依赖工具&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-y&lt;/span&gt; yum-utils&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 添加 docker 官方源&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; yum-config-manager &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    --add-repo &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    https://download.docker.com/linux/centos/docker-ce.repo&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查询可安装版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# yum list docker-ce --showduplicates | sort -r&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 安装特定版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# sudo yum install docker-ce-&amp;lt;VERSION_STRING&gt; docker-ce-cli-&amp;lt;VERSION_STRING&gt; containerd.io docker-compose-plugin&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 安装 docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; docker-ce docker-ce-cli containerd.io docker-compose-plugin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 启动 docker 服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl start &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 添加开机自启动&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;脚本安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚本安装&#34;&gt;#&lt;/a&gt; 脚本安装&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-fsSL&lt;/span&gt; https://get.docker.com &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; get-docker.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sh&lt;/span&gt; get-docker.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;阿里云镜像加速&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿里云镜像加速&#34;&gt;#&lt;/a&gt; 阿里云镜像加速&lt;/h2&gt;
&lt;p&gt;登录阿里云，进入容器镜像服务 -&amp;gt; 镜像加速器，复制代码在系统中执行即可&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221015211053.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker卸载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker卸载&#34;&gt;#&lt;/a&gt; docker 卸载&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;卸载 Docker 引擎、CLI、Containerd 和 Docker Compose 包：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有映像、容器和卷：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-b&#34;&gt;sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;您必须手动删除任何已编辑的配置文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://licwuu.github.io/blog/github-picgo-jsdelvr%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</guid>
            <title>github+picgo+jsdelvr搭建免费图床</title>
            <link>http://licwuu.github.io/blog/github-picgo-jsdelvr%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</link>
            <category term="default" scheme="http://licwuu.github.io/blog/categories/default/" />
            <category term="default" scheme="http://licwuu.github.io/blog/tags/default/" />
            <pubDate>Fri, 14 Oct 2022 15:00:33 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;如果我们平时写博客用的是 markdown 来进行编写，肯定会遇到图片的存储问题。如果放在本地，文章发送给别人看，图片将无法解析出来，这时候就需要用到图床 —— 一种在云端上存储图片的服务器，提供链接供我们访问图片，我们只需要在文章中插入对应链接即可实现一次储存，多地使用。本文将交大家如何利用 github+picGo 快速搭建免费图床，并使用 jsdelivr 免费做 CDN 加速。&lt;/p&gt;
&lt;h2 id=&#34;github准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#github准备&#34;&gt;#&lt;/a&gt; github 准备&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;准备一个图床仓库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/default/20221014230729.png&#34; alt=&#34;新建图床仓库&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很多博客教学让克隆 Github 仓库到本地和发布仓库 Release，其实如果仅仅作为图床使用可以不用做这几步操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取 github 的 Token 授权，后面 picgo 需要用到&lt;/p&gt;
&lt;p&gt;在 github-&amp;gt;setting-&amp;gt;Developer settings 的 Personal access tokens 中点击 Generate new token 生成新的 Token&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/default/20221014231554.png&#34; alt=&#34;token位置&#34; /&gt;&lt;br /&gt;
填写 Token 相关信息，Note 是 Token 的名字，随意就好，Expiration 是 Token 过期时间，建议设置为 No expiration，也就是永不过期，权限勾选下图中这几个就行，也可以根据自己情况勾选，然后点击最下方的 Generate Token。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/default/20221014232012.png&#34; alt=&#34;生成新token&#34; /&gt;&lt;br /&gt;
 界面这个位置会显示生成的 Token，请复制保存好，它只会显示一次。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/default/20221014232550.png&#34; alt=&#34;Token&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;picgo准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#picgo准备&#34;&gt;#&lt;/a&gt; Picgo 准备&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz&#34;&gt; picgo GitHub 仓库&lt;/span&gt;下载对应版本的安装包安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 Picgo 软件，点击图床配置，选择 GitHub 图床，填写相关配置&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/default/20221014233301.png&#34; alt=&#34;picgo配置&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;设定仓库名：你的 &lt;code&gt;github名/仓库名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设定分支名：main&lt;/li&gt;
&lt;li&gt;设定 Token：前面获取的 Github Token&lt;/li&gt;
&lt;li&gt;指定存储路径：相当于在仓库里的文件夹路径&lt;/li&gt;
&lt;li&gt;设定自定义域名：我们采用 jsdelivr 作 CDN 加速，因此这里填写的域名根据 jsdelivr 的规则应该是 &lt;code&gt;https://cdn.jsdelivr.net/gh/你的GitHub名/你的仓库名&lt;/code&gt; ，详见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuanNkZWxpdnIuY29tLw==&#34;&gt; jsdelivr 官网&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;欧克，到此，你已经拥有了一个属于你自己的图床，点击上传区即可上传图片到图床，picGo 会返回对应的图片链接，并且提供多种链接格式可以选择。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/default/20221015111143.png&#34; alt=&#34;image-20221015095706548&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;typaro一种简介方便的markdown编辑器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typaro一种简介方便的markdown编辑器&#34;&gt;#&lt;/a&gt; Typaro（一种简介方便的 markdown 编辑器）&lt;/h2&gt;
&lt;p&gt;如果你使用 Typaro 进行文章编写，可以在文件 -&amp;gt; 偏好设置 -&amp;gt; 图像里面配置 PicGo 进行图片上传，只需在填入 picGo 对应路径即可。现在你就可以直接使用 CV 大法直接插入图片了，图片会自动上传图床。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/images/default/image-20221015095952444.png&#34; alt=&#34;image-20221015095952444&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://licwuu.github.io/blog/redis%E5%AD%A6%E4%B9%A0/</guid>
            <title>redis学习</title>
            <link>http://licwuu.github.io/blog/redis%E5%AD%A6%E4%B9%A0/</link>
            <category term="学习笔记" scheme="http://licwuu.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" />
            <category term="redis" scheme="http://licwuu.github.io/blog/tags/redis/" />
            <category term="nosql" scheme="http://licwuu.github.io/blog/tags/nosql/" />
            <pubDate>Thu, 13 Oct 2022 12:48:01 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;redis简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis简介&#34;&gt;#&lt;/a&gt; Redis 简介&lt;/h2&gt;
&lt;p&gt;NoSQL (NoSQL = Not Only SQL)，意即 “不仅仅是 SQL”，泛指非关系型的数据库。NoSQL 不依赖业务逻辑方式存储，而以简单的 key-value 模式存储。因此大大的增加了数据库的扩展能力。Redis 就是典型的、也是常用的 NoSql 之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不遵循 SQL 标准。&lt;/li&gt;
&lt;li&gt;不支持 ACID。&lt;/li&gt;
&lt;li&gt;远超于 SQL 的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;适用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对数据高并发的读写&lt;/li&gt;
&lt;li&gt;海量数据的读写&lt;/li&gt;
&lt;li&gt;对数据高可扩展性的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用不着 sql 的和用了 sql 也不行的情况，请考虑用 NoSql&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不适用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要事务支持&lt;/li&gt;
&lt;li&gt;基于 sql 的结构化查询存储，处理复杂的关系，需要即席查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;一般 Redis 都是部署在 Linux 环境中，因此不考虑在 windows 中部署。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;准备 C 语言环境&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; centos-release-scl scl-utils-build&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-y&lt;/span&gt; devtoolset-8-toolchain&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;scl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; devtoolset-8 &lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 测试 GCC&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gcc &lt;span class=&#34;token parameter variable&#34;&gt;--version&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221013210915.png&#34; alt=&#34;测试GCC&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlZGlzLmlv&#34;&gt; Redis 官网&lt;/span&gt;下载对应的安装包，一般 Redis 都是部署在 Linux 环境中，即下载 for Linux (redis-xxx.tar.gz），放 /opt 目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压安装&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tar&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-zxvf&lt;/span&gt; redis-6.2.1.tar.gz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; redis-6.2.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;make&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;make&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;如果没有准备好 C 语言编译环境，make 会报错 (Jemalloc/jemalloc.h：没有那个文件), 只需要执行 &lt;code&gt;make distclean&lt;/code&gt;  后重新执行 &lt;code&gt;make&lt;/code&gt;  命令即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;默认安装目录：&lt;/strong&gt;/usr/local/bin&lt;br /&gt;
 查看默认安装目录常用命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis-benchmark: 性能测试工具，可以在自己本子运行，看看自己本子性能如何&lt;/li&gt;
&lt;li&gt;redis-check-aof：修复有问题的 AOF 文件，rdb 和 aof 后面讲&lt;/li&gt;
&lt;li&gt;redis-check-dump：修复有问题的 dump.rdb 文件&lt;/li&gt;
&lt;li&gt;redis-sentinel：Redis 集群使用&lt;/li&gt;
&lt;li&gt;redis-server：Redis 服务器启动命令&lt;/li&gt;
&lt;li&gt;redis-cli：客户端，操作入口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动&#34;&gt;#&lt;/a&gt; 启动&lt;/h2&gt;
&lt;h3 id=&#34;前台启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前台启动&#34;&gt;#&lt;/a&gt; 前台启动&lt;/h3&gt;
&lt;p&gt;在安装目录下运行 &lt;code&gt;redis-srver&lt;/code&gt;  即可。&lt;/p&gt;
&lt;h3 id=&#34;后台启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后台启动&#34;&gt;#&lt;/a&gt; 后台启动&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编写配置文件&lt;/p&gt;
&lt;p&gt;拷贝一份 redis.conf 到其他目录: &lt;code&gt;cp  /opt/redis-3.2.5/redis.conf  /myredis&lt;/code&gt; , 更改配置文件 daemonize no 改成 yes。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过配置文件启动，执行 &lt;code&gt;redis-server /myredis/redis.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;客户端连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端连接&#34;&gt;#&lt;/a&gt; 客户端连接&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis-cli &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# -p 6379 可省略&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;redis关闭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis关闭&#34;&gt;#&lt;/a&gt; redis 关闭&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;redis-cli 连接后使用 shutdown 命令关闭，或者直接 redis-cli -p 6379 shutdown&lt;/li&gt;
&lt;li&gt;kill -9 进程号&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;redis命令网站1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis命令网站1&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlZGlzZG9jLmNvbS9pbmRleC5odG1s&#34;&gt;Redis 命令网站 1&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tLw==&#34;&gt;Redis 命令网站 2&lt;/span&gt;&lt;/h2&gt;
&lt;h2 id=&#34;redis数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis数据类型&#34;&gt;#&lt;/a&gt; Redis 数据类型&lt;/h2&gt;
&lt;h3 id=&#34;0-redis-键key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-redis-键key&#34;&gt;#&lt;/a&gt; 0. Redis 键（key）&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;keys * &lt;span class=&#34;token comment&#34;&gt;# 查看当前库所有 key (匹配：keys *1)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;exists key &lt;span class=&#34;token comment&#34;&gt;# 判断某个 key 是否存在&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;type&lt;/span&gt; key &lt;span class=&#34;token comment&#34;&gt;# 查看你的 key 对应的值是什么类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;del key &lt;span class=&#34;token comment&#34;&gt;# 删除指定的 key 数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;unlink key &lt;span class=&#34;token comment&#34;&gt;# 根据 value 选择非阻塞删除，仅将 keys 从 keyspace 元数据中删除，真正的删除会在后续异步操作。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;expire key &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 10 秒钟：为给定的 key 设置过期时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ttl key &lt;span class=&#34;token comment&#34;&gt;# 查看还有多少秒过期，-1 表示永不过期，-2 表示已过期&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; n &lt;span class=&#34;token comment&#34;&gt;# 命令切换数据库 n&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dbsize &lt;span class=&#34;token comment&#34;&gt;# 查看当前数据库的 key 的数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flushdb &lt;span class=&#34;token comment&#34;&gt;# 清空当前库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flushall &lt;span class=&#34;token comment&#34;&gt;# 清空全部库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;1-字符串string&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-字符串string&#34;&gt;#&lt;/a&gt; 1. 字符串（String）&lt;/h3&gt;
&lt;h4 id=&#34;string简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string简介&#34;&gt;#&lt;/a&gt; String 简介&lt;/h4&gt;
&lt;p&gt;String 是 Redis 最基本的类型，一个 key 对应一个 value，类似于 Map&amp;lt;String,Object&amp;gt;。String 类型是二进制安全的，意味着 Redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。String 类型是 Redis 最基本的数据类型，一个 Redis 中字符串 value&lt;strong&gt; 最多可以是 512M&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;string常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string常用命令&#34;&gt;#&lt;/a&gt; String 常用命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set key value [EX seconds|PX milliseconds |KEEPTTL] [NX|XX]&lt;/code&gt;  添加键值对&lt;/p&gt;
&lt;p&gt;NX：当数据库中 key 不存在时，可以将 key-value 添加数据库&lt;/p&gt;
&lt;p&gt;XX：当数据库中 key 存在时，可以将 key-value 添加数据库，与 NX 参数互斥&lt;/p&gt;
&lt;p&gt;EX：key 的超时秒数&lt;/p&gt;
&lt;p&gt;PX：key 的超时毫秒数，与 EX 互斥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get  key&lt;/code&gt;  查询对应键值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;append key&lt;/code&gt;  value 将给定的 value  追加到原值的末尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strlen key&lt;/code&gt;  获得值的长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setnx key value&lt;/code&gt;  只有在 key 不存在时才能设置 key 的值，后面可以利用这个特性将其作为分布式锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;incr key&lt;/code&gt;  将 key 中储存的数字值增 1，只能对数字值操作，如果为空，新增值为 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;decr key&lt;/code&gt;  将 key 中储存的数字值减，只能对数字值操作，如果为空，新增值为 - 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;incrby/decrby key n&lt;/code&gt;  将 key 中储存的数字值增减 n (自定义步长)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;redis 中的 incr/decr 不同于 java 中的 i++，它是原子操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mset key1 value1 key2 value2 .....&lt;/code&gt;  同时设置一个或多个 key-value 队&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mget key1 key2 key3 .....&lt;/code&gt;  同时获取一个或多个 value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;msetnx key1 value1 key2 value2  .....&lt;/code&gt;  同时设置一个或多个 key-value 队，当且仅当所有给定 key 都不存在才成功，该操作具有原子性，有一个失败则都失败&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getrange key start end&lt;/code&gt;  命令用于获取存储在指定 key 中字符串的子字符串。字符串的截取范围由 start 和 end 两个偏移量决定 (包括 start 和 end 在内)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setrange  key start value&lt;/code&gt;  指定的字符串覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 start 开始&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setex  key 过期时间 value&lt;/code&gt;  设置键值的同时，设置过期时间，单位秒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getset key value&lt;/code&gt;  以新换旧，设置了新值同时获得旧值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;string数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string数据结构&#34;&gt;#&lt;/a&gt; String 数据结构&lt;/h4&gt;
&lt;p&gt;String 的数据结构为简单动态字符串 (Simple Dynamic String, 缩写 SDS)。是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221013221244.png&#34; alt=&#34;String数据结构&#34; /&gt;&lt;br /&gt;
如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;
&lt;h3 id=&#34;2-列表list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-列表list&#34;&gt;#&lt;/a&gt; 2. 列表 (List)&lt;/h3&gt;
&lt;h4 id=&#34;list简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list简介&#34;&gt;#&lt;/a&gt; List 简介&lt;/h4&gt;
&lt;p&gt;Redis 列表是简单的字符串列表 (单键多值)，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。&lt;br /&gt;
它的底层实际是个双向快速链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。&lt;/p&gt;
&lt;h4 id=&#34;list常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list常用命令&#34;&gt;#&lt;/a&gt; List 常用命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;lpush/rpush &amp;lt;key&amp;gt; &amp;lt;value1&amp;gt; &amp;lt;value2&amp;gt; &amp;lt;value3&amp;gt; ....&lt;/code&gt;  从左边 / 右边插入一个或多个值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lpop/rpop &amp;lt;key&amp;gt;&lt;/code&gt;  从左边 / 右边吐出一个值。值在键在，值光键亡。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rpoplpush &amp;lt;key1&amp;gt; &amp;lt;key2&amp;gt;&lt;/code&gt;  从 key1 列表右边吐出一个值，插到 key2 列表左边。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lrange &amp;lt;key&amp;gt; &amp;lt;start&amp;gt; &amp;lt;stop&amp;gt;&lt;/code&gt;  按照索引下标获得元素 (从左到右)，负数从右到左计数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lindex &amp;lt;key&amp;gt;&amp;lt;index&amp;gt;&lt;/code&gt;  按照索引下标获得元素 (从左到右)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;llen &amp;lt;key&amp;gt;&lt;/code&gt;  获得列表长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linsert &amp;lt;key&amp;gt; before &amp;lt;value&amp;gt; &amp;lt;newvalue&amp;gt;&lt;/code&gt;  在 value 的前面插入 newvalue&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lrem &amp;lt;key&amp;gt; &amp;lt;n&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;  从左边删除 n 个 value (从左到右)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lset &amp;lt;key&amp;gt; &amp;lt;index&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;  将列表 key 下标为 index 的值替换成 value&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;list数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list数据结构&#34;&gt;#&lt;/a&gt; List 数据结构&lt;/h4&gt;
&lt;p&gt;List 的数据结构为快速链表 quickList。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成 quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221013224949.png&#34; alt=&#34;redis列表数据结构&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-集合set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-集合set&#34;&gt;#&lt;/a&gt; 3. 集合 (Set)&lt;/h3&gt;
&lt;h4 id=&#34;set简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set简介&#34;&gt;#&lt;/a&gt; Set 简介&lt;/h4&gt;
&lt;p&gt;Redis set 对外提供的功能与 list 类似是一个列表的功能，特殊之处在于 set 是可以自动&lt;strong&gt;排重&lt;/strong&gt;的，当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。&lt;/p&gt;
&lt;p&gt;Redis 的 Set 是 string 类型的无序集合。它底层其实是一个 value 为 null 的 hash 表，所以添加，删除，查找的&lt;strong&gt;复杂度都是 O (1)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令参考：&lt;/strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5jd25lc3QudG9wL3NldC9pbmRleC5odG1s&#34;&gt;Redis Set 命令&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;set数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set数据结构&#34;&gt;#&lt;/a&gt; Set 数据结构&lt;/h4&gt;
&lt;p&gt;Set 数据结构是 dict 字典，字典是用&lt;strong&gt;哈希表&lt;/strong&gt;实现的。&lt;/p&gt;
&lt;p&gt;Java 中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。Redis 的 set 结构也是一样，它的内部也使用 hash 结构，所有的 value 都指向同一个内部值。&lt;/p&gt;
&lt;h3 id=&#34;4-哈希hash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-哈希hash&#34;&gt;#&lt;/a&gt; 4. 哈希 (Hash)&lt;/h3&gt;
&lt;h4 id=&#34;hash简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash简介&#34;&gt;#&lt;/a&gt; Hash 简介&lt;/h4&gt;
&lt;p&gt;Redis hash 是一个键值对集合。&lt;/p&gt;
&lt;p&gt;Redis hash 的 key 是一个 string 类型，值是一个 field 和 value 的映射表，它特别适合用于存储对象 (类似 Java 里面的 Map&amp;lt;String,Object&amp;gt;)。比如：用户 ID 为查找的 key，存储的 value 用户对象包含姓名，年龄，生日等信息，有以下的存储方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;每次修改用户的某个属性需要，先反序列化改好后再序列化回去，&lt;strong&gt;开销较大&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014102051.png&#34; alt=&#34;序列化方式&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过用户 ID 加属性标签构造不同 key,&lt;strong&gt; 用户 ID 数据冗余&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014102237.png&#34; alt=&#34;构造不同key&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 key (用户 ID) + field (属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014102309.png&#34; alt=&#34;hash结构存储&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;常用命令参考：&lt;/strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5jd25lc3QudG9wL2hhc2gvaW5kZXguaHRtbA==&#34;&gt;Redis Hash 命令&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;hash数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash数据结构&#34;&gt;#&lt;/a&gt; Hash 数据结构&lt;/h4&gt;
&lt;p&gt;Hash 类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当 field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable。&lt;/p&gt;
&lt;h3 id=&#34;5-有序集合zsetsorted-set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-有序集合zsetsorted-set&#34;&gt;#&lt;/a&gt; 5. 有序集合 Zset (sorted set)&lt;/h3&gt;
&lt;h4 id=&#34;zset-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zset-简介&#34;&gt;#&lt;/a&gt; Zset 简介&lt;/h4&gt;
&lt;p&gt;Redis 有序集合 zset 为每个成员都关联了一个评分（score）, 这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是&lt;strong&gt;唯一&lt;/strong&gt;的，但是&lt;strong&gt;评分可以是重复&lt;/strong&gt;的 。&lt;/p&gt;
&lt;p&gt;因为元素是有序的，所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。访问有序集合的中间元素也是非常快的，因此你能够使用有序集合作为一个没有重复成员的智能列表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用命令参考：&lt;/strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRpcy5jd25lc3QudG9wL3NvcnRlZF9zZXQvaW5kZXguaHRtbA==&#34;&gt;Redis Zset 命令&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;zset数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zset数据结构&#34;&gt;#&lt;/a&gt; Zset 数据结构&lt;/h4&gt;
&lt;p&gt;SortedSet (zset) 是 Redis 提供的一个非常特别的数据结构，一方面它等价于 Java 的数据结构 Map&amp;lt;String, Double&amp;gt;，可以给每一个元素 value 赋予一个权重 score，另一方面它又类似于 TreeSet，内部的元素会按照权重 score 进行排序，可以得到每个元素的名次，还可以通过 score 的范围来获取元素的列表。&lt;/p&gt;
&lt;p&gt;zset 底层使用了两个数据结构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;**Hash：**hash 的作用就是关联元素 value 和权重 score，保障元素 value 的唯一性，可以通过元素 value 找到相应的 score 值。&lt;/li&gt;
&lt;li&gt;** 跳跃表：** 跳跃表的目的在于给元素 value 排序，根据 score 的范围获取元素列表。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;什么是跳跃表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是跳跃表&#34;&gt;#&lt;/a&gt; 什么是跳跃表&lt;/h4&gt;
&lt;p&gt;有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis 采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。&lt;/p&gt;
&lt;p&gt;** 实例：** 对比有序链表和跳跃表，从链表中查询出 51&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;有序链表&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014103750.png&#34; alt=&#34;有序链表&#34; /&gt;&lt;/p&gt;
&lt;p&gt;要查找值为 51 的元素，需要从第一个元素开始依次查找、比较才能找到。共需要 6 次比较。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳跃表&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014103839.png&#34; alt=&#34;跳跃表&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从第 2 层开始，1 节点比 51 节点小，向后比较。&lt;/p&gt;
&lt;p&gt;21 节点比 51 节点小，继续向后比较，后面就是 NULL 了，所以从 21 节点向下到第 1 层&lt;/p&gt;
&lt;p&gt;在第 1 层，41 节点比 51 节点小，继续向后，61 节点比 51 节点大，所以从 41 向下&lt;/p&gt;
&lt;p&gt;在第 0 层，51 节点为要查找的节点，节点被找到，共查找 4 次。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从此可以看出跳跃表比有序链表效率要高。&lt;/p&gt;
&lt;h3 id=&#34;bitmaps&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bitmaps&#34;&gt;#&lt;/a&gt; Bitmaps&lt;/h3&gt;
&lt;h4 id=&#34;bitmaps简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bitmaps简介&#34;&gt;#&lt;/a&gt; Bitmaps 简介&lt;/h4&gt;
&lt;p&gt;Redis 提供了 Bitmaps 这个 “数据类型” 可以实现对位的操作，合理地使用操作位能够有效地提高内存使用率和开发效率。Bitmaps 本身不是一种数据类型，实际上它就是字符串（key-value），但是它可以对字符串的位进行操作。Bitmaps 单独提供了一套命令，所以在 Redis 中使用 Bitmaps 和使用字符串的方法不太相同，可以把 Bitmaps 想象成一个以位为单位的数组，数组的每个单元只能存储 0 和 1，数组的下标在 Bitmaps 中叫做偏移量。&lt;/p&gt;
&lt;h4 id=&#34;使用样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用样例&#34;&gt;#&lt;/a&gt; 使用样例&lt;/h4&gt;
&lt;p&gt;每个独立用户是否访问过网站存放在 Bitmaps 中， 将访问的用户记做 1， 没有访问的用户记做 0， 用偏移量作为用户的 id。设置键的第 offset 个位的值（从 0 算起） ， 假设现在有 20 个用户，userid=1， 6， 11， 15， 19 的用户对网站进行了访问， 那么当前 Bitmaps 初始化结果如图：&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221015141156.png&#34; alt=&#34;20221015141156&#34; /&gt;&lt;br /&gt;
bitmap 还可以进行复合操作， 它可以做多个 Bitmaps 的 and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在目标 key 中。&lt;/p&gt;
&lt;p&gt;注：很多应用的用户 id 以一个指定数字（例如 10000） 开头，直接将用户 id 和 Bitmaps 的偏移量对应势必会造成一定的浪费，通常的做法是每次做 setbit 操作时将用户 id 减去这个指定数字。在第一次初始化 Bitmaps 时，假如偏移量非常大，那么整个初始化过程执行会比较慢， 可能会造成 Redis 的阻塞。&lt;/p&gt;
&lt;h4 id=&#34;bitmaps与set对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bitmaps与set对比&#34;&gt;#&lt;/a&gt; Bitmaps 与 set 对比&lt;/h4&gt;
&lt;p&gt;假设网站有 1 亿用户， 每天独立访问的用户有 5 千万， 如果每天用集合类型和 Bitmaps 分别存储活跃用户可以得到表:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;每个用户 id 占用空间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;需要存储的用户量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;全部内存量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;集合类型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 位&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50000000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 位 * 50000000 = 400MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bitmaps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 位&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100000000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 位 * 100000000 = 12.5MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;很明显， 这种情况下使用 Bitmaps 能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;一天&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;一个月&lt;/th&gt;
&lt;th&gt;一年&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;集合类型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;400MB&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;12GB&lt;/td&gt;
&lt;td&gt;144GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bitmaps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;12.5MB&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;375MB&lt;/td&gt;
&lt;td&gt;4.5GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;但 Bitmaps 并不是万金油，假如该网站每天的独立访问用户很少，例如只有 10 万（大量的僵尸用户），那么两者的对比如下表所示，很显然，这时候使用 Bitmaps 就不太合适了，因为基本上大部分位都是 0&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;每个 userid 占用空间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;需要存储的用户量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;全部内存量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;集合类型&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 位&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64 位 * 100000 = 800KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bitmaps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 位&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100000000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 位 * 100000000 = 12.5MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;hyperloglog&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hyperloglog&#34;&gt;#&lt;/a&gt; HyperLogLog&lt;/h3&gt;
&lt;p&gt;在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站 PV（PageView 页面访问量）, 可以使用 Redis 的 incr、incrby 轻松实现。但像 UV（UniqueVisitor，独立访客）、独立 IP 数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。&lt;/p&gt;
&lt;p&gt;解决基数问题有很多种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据存储在 MySQL 表中，使用 distinct count 计算不重复个数&lt;/li&gt;
&lt;li&gt;使用 Redis 提供的 hash、set、bitmaps 等数据结构来处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。&lt;/p&gt;
&lt;p&gt;能否能够降低一定的精度来平衡存储空间？Redis 推出了 HyperLogLog&lt;/p&gt;
&lt;p&gt;Redis HyperLogLog 是用来做基数统计的算法。HyperLogLog 在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。在 Redis 里面，每个 HyperLogLog 键只需要花费 12KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。&lt;/p&gt;
&lt;p&gt;但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是基数？&lt;br /&gt;
 比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数 (不重复元素) 为 5。 基数估计就是在误差可接受的范围内，快速计算基数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;geospatial&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#geospatial&#34;&gt;#&lt;/a&gt; Geospatial&lt;/h3&gt;
&lt;p&gt;Redis 3.2 中增加了对 GEO 类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的 2 维坐标，在地图上就是经纬度。redis 基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度 Hash 等常见操作。如：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 添加城市经纬度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;geoadd china:city &lt;span class=&#34;token number&#34;&gt;106.50&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;29.53&lt;/span&gt; chongqing &lt;span class=&#34;token number&#34;&gt;114.05&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;22.52&lt;/span&gt; shenzhen &lt;span class=&#34;token number&#34;&gt;116.38&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;39.90&lt;/span&gt; beijing &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 计算城市距离 geodist&amp;lt;key&gt;&amp;lt;member1&gt;&amp;lt;member2&gt;  [m|km|ft|mi]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;geodist china:city chongqing shenzhen  km&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;redis配置文件常用配置介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis配置文件常用配置介绍&#34;&gt;#&lt;/a&gt; Redis 配置文件常用配置介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;requirepass&lt;/strong&gt;：设置密码（！！！）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unit 单元&lt;/strong&gt;：配置大小单位，开头定义了一些基本的度量单位，只支持 bytes，不支持 bit，大小写不敏感&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;INCLUDES 包含&lt;/strong&gt;：多实例的情况可以把公用的配置文件提取出来，通过 &lt;code&gt;include /对应路径&lt;/code&gt; 应用过来即可&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bind&lt;/strong&gt;：绑定接受谁的访问请求。默认配置是 &lt;code&gt;bind=127.0.0.1&lt;/code&gt;  只接受本机请求，如果不设定且 &lt;code&gt;protected-mode no&lt;/code&gt; ，则是无限制接受任何 ip 地址的访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;protected-mode&lt;/strong&gt;：如果开启了 protected-mode，那么在没有设定 bind ip 且没有设密码的情况下，Redis 只允许接受本机的响应，默认开启&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;port&lt;/strong&gt;：启动端口号，默认 6379&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tcp-backlog&lt;/strong&gt;：设置 tcp 的 backlog，backlog 其实是一个连接队列，backlog 队列总和 = 未完成三次握手队列 + 已经完成三次握手队列。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在高并发环境下你需要一个高 backlog 值来避免慢客户端连接问题。注意 Linux 内核会将这个值减小到 /proc/sys/net/core/somaxconn 的值（128），所以需要确认增大 /proc/sys/net/core/somaxconn 和 /proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;timeout&lt;/strong&gt;：设定一个空闲的客户端维持多少秒会关闭，0 表示关闭该功能，即永不关闭&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tcp-keepalive n&lt;/strong&gt;: 对访问客户端的一种心跳检测，每 n 秒检测一次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;daemonzie&lt;/strong&gt;: 是否后台启动，建议 yes&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pidfile&lt;/strong&gt;：设置存放 pid 文件的位置，每个实例会产生一个不同的 pid 文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;loglevel&lt;/strong&gt;：设置日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;logfile&lt;/strong&gt;：设置日志文件名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;databases&lt;/strong&gt;：设定库的数量，默认 16&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;maxclients&lt;/strong&gt;：设置 redis 同时可以与多少个客户端进行连接，默认情况下为 10000 个客户端，如果达到了此限制，redis 则会拒绝新的连接请求，并且向这些连接请求方发出 “max number of clients reached” 以作回应&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;maxmemory&lt;/strong&gt;：设置 redis 可以使用的内存量。一旦到达内存使用上限，redis 将会试图移除内部数据，移除规则可以通过 maxmemory-policy 来指定&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建议必须设置，否则，将内存占满，造成服务器宕机&lt;br /&gt;
如果 redis 无法根据移除规则来移除内存中的数据，或者设置了 “不允许移除”，那么 redis 则会针对那些需要申请内存的指令返回错误信息，比如 SET、LPUSH 等&lt;br /&gt;
但是对于无内存申请的指令，仍然会正常响应，比如 GET 等。如果你的 redis 是主 redis（说明你的 redis 有从 redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是 “不移除” 的情况下，才不用考虑这个因素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;maxmemory-policy&lt;/strong&gt;: 指定 maxmemory 的移除规则，有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;volatile-lru：使用 LRU 算法移除 key，只对设置了过期时间的键；（最近最少使用）&lt;/li&gt;
&lt;li&gt;allkeys-lru：在所有集合 key 中，使用 LRU 算法移除 key&lt;/li&gt;
&lt;li&gt;volatile-random：在过期集合中移除随机的 key，只对设置了过期时间的键&lt;/li&gt;
&lt;li&gt;allkeys-random：在所有集合 key 中，移除随机的 key&lt;/li&gt;
&lt;li&gt;volatile-ttl：移除那些 TTL 值最小的 key，即那些最近要过期的 key&lt;/li&gt;
&lt;li&gt;noeviction (默认)：不进行移除。针对写操作，只是返回错误信息&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;redis的发布和订阅&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis的发布和订阅&#34;&gt;#&lt;/a&gt; Redis 的发布和订阅&lt;/h2&gt;
&lt;h3 id=&#34;什么是发布订阅&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是发布订阅&#34;&gt;#&lt;/a&gt; 什么是发布订阅&lt;/h3&gt;
&lt;p&gt;Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息 (观察者模式)。&lt;/p&gt;
&lt;p&gt;Redis 客户端可以订阅频道如下图右侧 (可以订阅任意数量的频道), 当发布者给这个频道发布消息后，消息就会发送给订阅的客户端&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014113540.png&#34; alt=&#34;发布订阅样例&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;命令行实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令行实现&#34;&gt;#&lt;/a&gt; 命令行实现&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开一个客户端订阅 channel1： &lt;code&gt;SUBSCRIBE channel1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开另一个客户端，给 channel1 发布消息 hello： &lt;code&gt;publish channel1 hello&lt;/code&gt; , 返回的 1 是订阅者数量&lt;/li&gt;
&lt;li&gt;在第一个客户端可以看到发送的消息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014114349.png&#34; alt=&#34;发布订阅实现样例&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：发布的消息没有持久化，如果在订阅的客户端没有收到 hello，那就只能收到之后发布的消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;redis事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis事务&#34;&gt;#&lt;/a&gt; redis 事务&lt;/h2&gt;
&lt;h3 id=&#34;事务定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务定义&#34;&gt;#&lt;/a&gt; 事务定义&lt;/h3&gt;
&lt;p&gt;Redis 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断，其主要作用就是串联多个命令防止别的命令插队。&lt;/p&gt;
&lt;p&gt;redis 中事务和 mysql 中事务不太像一个概念；redis 中事务通过组队完成多个命令的绑定操作，是为了防止别的命令插队，不会回滚。&lt;/p&gt;
&lt;h3 id=&#34;事务命令multi-exec-discard&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务命令multi-exec-discard&#34;&gt;#&lt;/a&gt; 事务命令 (Multi、Exec、discard)&lt;/h3&gt;
&lt;p&gt;从输入 Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 Exec 后，Redis 会将之前的命令队列中的命令依次执行，组队的过程中可以通过 discard 来放弃组队。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014150423.png&#34; alt=&#34;事务组队过程&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;事务错误处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务错误处理&#34;&gt;#&lt;/a&gt; 事务错误处理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在组队过程中出现错误（如语法错误）会立即提示，不修改命令直接使用 exec 执行，所有组队的命令都无法执行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在组队阶段成功，在执行阶段发生错误，只有错误命令不执行，其他命令照常执行，&lt;strong&gt;不会回滚&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;事务冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务冲突&#34;&gt;#&lt;/a&gt; 事务冲突&lt;/h3&gt;
&lt;p&gt;样例：有多个人拥有你的账户，同时对其操作就会产生事务冲突。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221010195207412.png&#34; alt=&#34;image-20221010195207412&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;悲观锁&lt;/strong&gt;：假想每次拿数据后原有数据都会被修改，所以，每次拿数据都给数据上锁，使得别人无法操作该数据。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014162312.png&#34; alt=&#34;悲观锁&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tips: 传统关系型数据库的行锁、表锁等都是这种方式。但是这种方式效率很慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;** 乐观锁：** 给数据加上一个标识，如版本号等，拿到数据进行操作后，查看现在数据和之前拿到的版本号是否一致；不一致则说明有人操作过数据，需要重新读取数据再进行操作；一致则说明操作期间没人动过数据，直接更新数据和更改版本号即可。&lt;strong&gt;乐观锁适用于多读的应用类型，这样可以提高吞吐量&lt;/strong&gt;。Redis 就是利用这种 check-and-set 机制实现事务的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014162329.png&#34; alt=&#34;乐观锁&#34; /&gt;&lt;/p&gt;
&lt;p&gt;**redis 中通过 watch 命令监听 key 实现乐观锁:**WATCH key [key ...] ，unwatch 命令可以取消监听。&lt;/p&gt;
&lt;p&gt;在执行 multi 之前，先执行 watch key1 [key2], 可以监视一个 (或多个) key ，如果在事务&lt;strong&gt;执行之前这个 (或这些) key 被其他命令所改动，那么事务将被打断。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;事务三大特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务三大特性&#34;&gt;#&lt;/a&gt; 事务三大特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;单独的隔离操作&lt;/strong&gt;：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有隔离级别的概念&lt;/strong&gt;：队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不保证原子性&lt;/strong&gt;：事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;redis持久化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis持久化&#34;&gt;#&lt;/a&gt; Redis 持久化&lt;/h2&gt;
&lt;h3 id=&#34;1-rdbredis-database&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-rdbredis-database&#34;&gt;#&lt;/a&gt; 1. RDB(redis database)&lt;/h3&gt;
&lt;h4 id=&#34;什么是rdb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是rdb&#34;&gt;#&lt;/a&gt; 什么是 RDB&lt;/h4&gt;
&lt;p&gt;RDB 是指在指定的时间间隔内将内存中的数据集快照写入磁盘 —— 快照（Snapshot），它恢复时是将快照文件直接读到内存里，redis 会&lt;strong&gt;默认开启 rdb&lt;/strong&gt;，并将备份文件保存在./dump.rdb 中&lt;/p&gt;
&lt;h4 id=&#34;rdb执行流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb执行流程&#34;&gt;#&lt;/a&gt; RDB 执行流程&lt;/h4&gt;
&lt;p&gt;Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。&lt;strong&gt;RDB 的缺点是最后一次持久化后的数据可能丢失&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014170805.png&#34; alt=&#34;RDB执行流程&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fork 的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程&lt;/p&gt;
&lt;p&gt;在 Linux 程序中，fork () 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统调用，出于效率考虑，Linux 中引入了 “&lt;strong&gt;写时复制技术&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般情况父进程和子进程会共用同一段物理内存&lt;/strong&gt;，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;save-bgsave&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#save-bgsave&#34;&gt;#&lt;/a&gt; save &amp;amp;&amp;amp; bgsave&lt;/h4&gt;
&lt;p&gt;RDB 采用写时复制技术在指定时间间隔将 redis 数据同步到磁盘中，有 save 和 bgsave 两种配置，推荐采用 bgsave 操作。因为 save 操作会阻塞，而 bgsave 是异步的。&lt;/p&gt;
&lt;p&gt;格式： &lt;code&gt;save 秒钟 写操作次数&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如：save 10 1000 则表示 10s 内有 1000 次写操作，就触发备份。&lt;/p&gt;
&lt;h4 id=&#34;rdb备份与恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb备份与恢复&#34;&gt;#&lt;/a&gt; RDB 备份与恢复&lt;/h4&gt;
&lt;p&gt;备份：先通过 config get dir 查询 rdb 文件的目录 ，将 *.rdb 的文件拷贝到别的地方即可。&lt;/p&gt;
&lt;p&gt;恢复：先把备份的文件拷贝到工作目录下  &lt;code&gt;cp 备份文件路径 dump.rdb&lt;/code&gt; , 再启动 Redis, 备份数据会直接加载。&lt;/p&gt;
&lt;h4 id=&#34;rdb优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb优势&#34;&gt;#&lt;/a&gt; RDB 优势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;适合大规模的数据恢复&lt;/li&gt;
&lt;li&gt;对数据完整性和一致性要求不高更适合使用&lt;/li&gt;
&lt;li&gt;节省磁盘空间&lt;/li&gt;
&lt;li&gt;恢复速度快&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rdb劣势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rdb劣势&#34;&gt;#&lt;/a&gt; RDB 劣势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fork 的时候，内存中的数据被克隆了一份，大致 2 倍的膨胀性需要考虑&lt;/li&gt;
&lt;li&gt;虽然 Redis 在 fork 时使用了&lt;strong&gt;写时拷贝技术&lt;/strong&gt;，但是如果数据庞大时还是比较消耗性能&lt;/li&gt;
&lt;li&gt;在备份周期在一定间隔时间做一次备份，所以如果 Redis 意外 down 掉的话，就会丢失最后一次快照之后的所有修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-aofappend-only-file&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-aofappend-only-file&#34;&gt;#&lt;/a&gt; 2. AOF(append only file)&lt;/h3&gt;
&lt;h4 id=&#34;什么是aof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是aof&#34;&gt;#&lt;/a&gt; 什么是 AOF&lt;/h4&gt;
&lt;p&gt;AOF 以&lt;strong&gt;日志&lt;/strong&gt;的形式来记录每个写操作（增量保存），将 Redis 执行过的所有写指令记录下来 (&lt;strong&gt;读操作不记录&lt;/strong&gt;)， &lt;strong&gt;只许追加文件但不可以改写文件&lt;/strong&gt;，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。AOF&lt;strong&gt; 默认关闭，如果开启默认保存在./appendonly.aof&lt;/strong&gt; 中。&lt;/p&gt;
&lt;h4 id=&#34;执行流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行流程&#34;&gt;#&lt;/a&gt; 执行流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;客户端的请求写命令会被 append 追加到 AOF 缓冲区内；&lt;/li&gt;
&lt;li&gt;AOF 缓冲区根据 AOF 持久化策略 [always,everysec,no] 将操作 sync 同步到磁盘的 AOF 文件中；&lt;/li&gt;
&lt;li&gt;AOF 文件大小超过重写策略或手动重写时，会对 AOF 文件 rewrite 重写，压缩 AOF 文件容量；&lt;/li&gt;
&lt;li&gt;Redis 服务重启时，会重新 load 加载 AOF 文件中的写操作达到数据恢复的目的；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/20221014172420.png&#34; alt=&#34;AOF持久化流程&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AOF 重写操作&lt;/strong&gt;：当 aof 文件过大，达到设定阈值，redis 会对其进行重写压缩操作，将前面的指令转化为 RDB 文件的格式以减少磁盘占用，并记录转化后文件大小，下次在超过当前大小 100% 时再次触发重写操作。比如文件大小达到 64M 时触发了重写操作，压缩到了 60M，下次在达到 120M 时再次触发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;启动-备份-和恢复异常恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动-备份-和恢复异常恢复&#34;&gt;#&lt;/a&gt; 启动、备份、和恢复（异常恢复）&lt;/h4&gt;
&lt;p&gt;启动：修改默认的 appendonly no，改为 yes&lt;/p&gt;
&lt;p&gt;备份：同 RDB 一样，都是拷贝备份文件&lt;/p&gt;
&lt;p&gt;恢复：将备份文件拷贝到 Redis 工作目录下，启动系统即加载&lt;/p&gt;
&lt;p&gt;异常恢复：如遇到&lt;strong&gt; AOF 文件损坏&lt;/strong&gt;，可备份文件再通过 /usr/local/bin/&lt;strong&gt;redis-check-aof--fix appendonly.aof&lt;/strong&gt; 进行恢复文件。重启 redis，然后重新加载&lt;/p&gt;
&lt;h4 id=&#34;aof同步频率设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aof同步频率设置&#34;&gt;#&lt;/a&gt; AOF 同步频率设置&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;appendfsync always&lt;/code&gt; ：始终同步，每次 Redis 的写入都会立刻记入日志；性能较差但数据完整性比较好&lt;/p&gt;
&lt;p&gt;&lt;code&gt;appendfsync everysec&lt;/code&gt; ：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;appendfsync no&lt;/code&gt; ：redis 不主动进行同步，把同步时机交给操作系统。&lt;/p&gt;
&lt;h4 id=&#34;优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优势&#34;&gt;#&lt;/a&gt; 优势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;备份机制更稳健，丢失数据概率更低。&lt;/li&gt;
&lt;li&gt;可读的日志文本，通过操作 AOF 稳健，可以处理误操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;劣势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#劣势&#34;&gt;#&lt;/a&gt; 劣势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;比起 RDB 占用更多的磁盘空间。&lt;/li&gt;
&lt;li&gt;恢复备份速度要慢。&lt;/li&gt;
&lt;li&gt;每次读写都同步的话，有一定的性能压力。&lt;/li&gt;
&lt;li&gt;存在个别 Bug，造成恢复不能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;怎么选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么选择&#34;&gt;#&lt;/a&gt; 怎么选择？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;官方建议两个都启用&lt;/li&gt;
&lt;li&gt;如果对数据不敏感，可以单独 RDB&lt;/li&gt;
&lt;li&gt;如果只做纯内存缓存可以都不使用&lt;/li&gt;
&lt;li&gt;不建议单独 AOF，可能有 Bug&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果 AOF 和 RDB 同时开启，系统使用谁恢复数据？&lt;/p&gt;
&lt;p&gt;默认会使用 AOF 恢复数据。因为 AOF 数据还原度高吧，RDB 会丢失最后一次备份之后操作的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;官方建议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#官方建议&#34;&gt;#&lt;/a&gt; 官方建议&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RDB 持久化方式能够在指定的时间间隔能对你的数据进行快照存储&lt;/li&gt;
&lt;li&gt;AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 redis 协议追加保存每次写的操作到文件末尾&lt;/li&gt;
&lt;li&gt;Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大&lt;/li&gt;
&lt;li&gt;只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式.&lt;/li&gt;
&lt;li&gt;同时开启两种持久化方式&lt;/li&gt;
&lt;li&gt;在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整.&lt;/li&gt;
&lt;li&gt;RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。那要不要只使用 AOF 呢？&lt;/li&gt;
&lt;li&gt;建议不要，因为 RDB 更适合用于备份数据库 (AOF 在不断变化不好备份)， 快速重启，而且不会有 AOF 可能潜在的 bug，留着作为一个万一的手段。&lt;/li&gt;
&lt;li&gt;性能建议&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够了，只保留 &lt;code&gt;save 900 1&lt;/code&gt;  这条规则。&lt;br /&gt;
如果使用 AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只 load 自己的 AOF 文件就可以了。&lt;br /&gt;
代价，一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。&lt;br /&gt;
只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值 64M 太小了，可以设到 5G 以上。&lt;br /&gt;
默认超过原大小 100% 大小时重写可以改到适当的数值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;redis主从复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis主从复制&#34;&gt;#&lt;/a&gt; Redis 主从复制&lt;/h2&gt;
&lt;h3 id=&#34;是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么&#34;&gt;#&lt;/a&gt; 是什么&lt;/h3&gt;
&lt;p&gt;主机数据更新后根据配置和策略，自动同步到备机的 master/slaver 机制，master 主写，slaver 主读，一般&lt;strong&gt;一主多从&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221011094914723.png&#34; alt=&#34;image-20221011094914723&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：读写分离，性能扩展、容灾快速恢复&lt;/p&gt;
&lt;h3 id=&#34;单机搭建一主两从&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单机搭建一主两从&#34;&gt;#&lt;/a&gt; 单机搭建一主两从&lt;/h3&gt;
&lt;p&gt;在 redis 中更改以下配置，作为公共配置：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Appendonly no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;daemonize &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编写多个不同配置文件（其他两个把 6379 改为别的端口，如 6380、6381），写入以下配置&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;include /myredis/redis.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pidfile /var/run/redis_6379.pid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;port &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dbfilename dump6379.rdb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;启动三台 redis 服务器，可以通过 &lt;code&gt;redis-cli -p 端口号&lt;/code&gt; 分别登录三台服务器，使用 &lt;code&gt;info replication&lt;/code&gt;  查看相关信息&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis-server redis6379.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis-server redis6380.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis-server redis6381.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;配置主从关系：&lt;strong&gt;配从不配主&lt;/strong&gt;，连接要作为从机的服务器，输入 &lt;code&gt;slaveof &amp;lt;主机ip&amp;gt;&amp;lt;主机port&amp;gt;&lt;/code&gt; ，主从关系建立。&lt;/p&gt;
&lt;h3 id=&#34;常用主从搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用主从搭建&#34;&gt;#&lt;/a&gt; 常用主从搭建&lt;/h3&gt;
&lt;h4 id=&#34;一主两从&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一主两从&#34;&gt;#&lt;/a&gt; 一主两从&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221011142451587.png&#34; alt=&#34;image-20221011142451587&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从服务器挂掉&lt;/strong&gt;之后再次重启，并不会直接作为之前主服务器的从服务器，而是自己成为主服务器，独立出来。 要想重新加入之前的主从复制，需要重新执行 slaveof 命令加入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主服务器挂掉&lt;/strong&gt;之后，从服务器还是作为从服务器，原地待命，等主服务器重启之后，仍然保持原有主从关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;薪火相传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#薪火相传&#34;&gt;#&lt;/a&gt; 薪火相传&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221011142546642.png&#34; alt=&#34;image-20221011142546642&#34; /&gt;&lt;/p&gt;
&lt;p&gt;主从服务器挂掉之后关系转变和一主二从一样，风险是一旦某个 slave 宕机，该 slave 后面跟的 slave 都没法备份&lt;/p&gt;
&lt;h4 id=&#34;反客为主&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反客为主&#34;&gt;#&lt;/a&gt; 反客为主&lt;/h4&gt;
&lt;p&gt;当一个 master 宕机后，可以用 slaveof no one 命令（得手动操作，要自动完成得加入哨兵）将后面的从机变成主机，其后面的 slave 不用做任何修改。&lt;/p&gt;
&lt;h3 id=&#34;主从复制原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从复制原理&#34;&gt;#&lt;/a&gt; 主从复制原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Slave 启动成功连接到 master 后会发送一个 sync 命令&lt;/li&gt;
&lt;li&gt;Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master 将传送整个数据文件到 slave, 以完成一次完全同步&lt;/li&gt;
&lt;li&gt;全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。&lt;/li&gt;
&lt;li&gt;增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave, 完成同步&lt;/li&gt;
&lt;li&gt;但是只要是重新连接 master, 一次完全同步（全量复制) 将被自动执行&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;全量复制之前由 salve 主动发起而之后则是由 master 发起，每次为增量复制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;哨兵模式自动版反客为主&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哨兵模式自动版反客为主&#34;&gt;#&lt;/a&gt; 哨兵模式 (自动版反客为主)&lt;/h2&gt;
&lt;p&gt;以上面的一主两从（主：6379，从：6380、6381）例子为基础&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在自定义的 /myredis 目录下新建 sentinel.conf 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置哨兵，vim sentinel.conf&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sentinemonitor mymaster &lt;span class=&#34;token number&#34;&gt;127.0&lt;/span&gt;.0.1 &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 其中 mymaster 为监控对象起的名称，1 表示从服务器变成主服务器至少需要有 1 个哨兵同意。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动哨兵: &lt;code&gt;redis-sentinel sentinel.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加入哨兵后，当主服务器挂掉后，会在从机中选举出新的主服务器，而当原来主服务器恢复后，成为新主服务器的从服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新主机选举规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择优先级靠前的：优先级在 redis.conf 中配置，默认 100；&lt;/li&gt;
&lt;li&gt;选择偏移量最大的：偏移量指过的原主机数据最全的，也就是最近同步的；&lt;/li&gt;
&lt;li&gt;选择 runid 最小的：每个 redis 实例启动后都会随机生成一个 40 位的 runid&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;redis集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis集群&#34;&gt;#&lt;/a&gt; Redis 集群&lt;/h2&gt;
&lt;h3 id=&#34;什么是集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是集群&#34;&gt;#&lt;/a&gt; 什么是集群&lt;/h3&gt;
&lt;p&gt;Redis 集群实现了对 Redis 的水平扩容，即启动 N 个 redis 节点，将整个数据库分布存储在这 N 个节点中，每个节点存储总数据的 1/N。&lt;/p&gt;
&lt;p&gt;Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。&lt;/p&gt;
&lt;h3 id=&#34;集群解决的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群解决的问题&#34;&gt;#&lt;/a&gt; 集群解决的问题&lt;/h3&gt;
&lt;p&gt;容量不够，redis 如何进行扩容？&lt;/p&gt;
&lt;p&gt;并发写操作， redis 如何分摊？&lt;/p&gt;
&lt;p&gt;主从模式，薪火相传模式，主机宕机，导致 ip 地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。&lt;/p&gt;
&lt;p&gt;Redis3.0 中为此提供了解决方案 —— 无中心化集群配置，在此之前可以通过代理主机来解决。&lt;/p&gt;
&lt;h3 id=&#34;如何构建集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何构建集群&#34;&gt;#&lt;/a&gt; 如何构建集群&lt;/h3&gt;
&lt;p&gt;在之前的配置中加入或修改一下集群相关配置，创建好对应数量的配置文件（本例中配置最简单的 6 个 redis 服务构成一个集群）&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-enabled &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 打开集群模式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-config-file nodes-6379.conf &lt;span class=&#34;token comment&#34;&gt;# 设定节点配置文件名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-node-timeout &lt;span class=&#34;token number&#34;&gt;15000&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;vim 可使用 % s/6379/6380 将所有 6379 替换为 6380&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;启动服务，此时会在目录下生成 nodes-port.conf 文件（不是之前的配置文件，你要搞错了），通过 ll 命令查看是否生成。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis &lt;span class=&#34;token parameter variable&#34;&gt;-server&lt;/span&gt; redis6379.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis &lt;span class=&#34;token parameter variable&#34;&gt;-server&lt;/span&gt; redis6380.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis &lt;span class=&#34;token parameter variable&#34;&gt;-server&lt;/span&gt; redis6381.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis &lt;span class=&#34;token parameter variable&#34;&gt;-server&lt;/span&gt; redis6389.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis &lt;span class=&#34;token parameter variable&#34;&gt;-server&lt;/span&gt; redis6390.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis &lt;span class=&#34;token parameter variable&#34;&gt;-server&lt;/span&gt; redis6391.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;合体成集群&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt;  /opt/redis-6.2.1/src&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis-cli &lt;span class=&#34;token parameter variable&#34;&gt;--cluster&lt;/span&gt; create --cluster-replicas &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.11.101:6379 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.11.101:6380 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.11.101:6381 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.11.101:6389 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.11.101:6390 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.11.101:6391&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# --replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录&#34;&gt;#&lt;/a&gt; 登录&lt;/h4&gt;
&lt;p&gt;普通方式登录： &lt;code&gt;redis-cli -p 6379&lt;/code&gt; , 操作时会报错 MOVED...&lt;/p&gt;
&lt;p&gt;应该采用集群方式登录， &lt;code&gt;redis-cli  -c -p 6379&lt;/code&gt; , -c 采用集群策略连接，设置数据会自动切换到相应的写主机，-p 后面端口可填集群中任意端口。登陆后可用 &lt;code&gt;cluster nodes&lt;/code&gt;  查看集群信息。&lt;/p&gt;
&lt;h4 id=&#34;redis-cluster-如何分配这六个节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-cluster-如何分配这六个节点&#34;&gt;#&lt;/a&gt; redis cluster 如何分配这六个节点？&lt;/h4&gt;
&lt;p&gt;一个集群至少要有&lt;strong&gt;三个主节&lt;/strong&gt;点，选项 --cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。分配原则&lt;strong&gt;尽量保证每个主数据库运行在不同的 IP 地址，每个从库和主库不在一个 IP 地址上。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;slots插槽&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#slots插槽&#34;&gt;#&lt;/a&gt; slots（插槽）&lt;/h3&gt;
&lt;p&gt;一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， 集群使用公式 CRC16 (key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16 (key) 语句用于计算键 key 的 CRC16 校验和 。集群中的每个节点负责处理一部分插槽。 比如， 如果一个集群有 3 个主节点， 其中：节点 A 负责处理 0 号至 5460 号插槽；节点 B 负责处理 5461 号至 10922 号插槽；节点 C 负责处理 10923 号至 16383 号插槽。CRC16 (k1) % 16384 = 5000，则 k1 会被放在节点 A 中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么插槽数量是 16384 ，而不是 Master 数量或者 2^16-1=65535 个（CRC16 能提供的值）？&lt;/p&gt;
&lt;p&gt;redis source code author antirez say ：&lt;/p&gt;
&lt;p&gt;1、正常的心跳包携带节点的完整配置，可以用幂等方式替换旧节点以更新旧配置。 这意味着它们包含原始形式的节点的插槽配置，它使用带有 16k 插槽的 2k 空间，但使用 65k 插槽时将使用高达 8k 的空间。&lt;br /&gt;
2、同时，由于其他设计权衡，Redis Cluster 不太可能扩展到超过 1000 个主节点。&lt;br /&gt;
因此，16k 处于正确的范围内，以确保每个主站有足够的插槽，最多 1000 个主站，但足够小的数字可以轻松地将插槽配置传播为原始位图。 请注意，在小型集群中，位图难以压缩，因为当 N 很小时，位图将设置插槽 / N 位，这是设置的大部分位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;在集群中录入值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在集群中录入值&#34;&gt;#&lt;/a&gt; 在集群中录入值&lt;/h3&gt;
&lt;p&gt;在 redis-cli 每次录入、查询键值，redis 都会计算出该 key 应该送往的插槽，如果不是该客户端对应服务器的插槽，redis 会报错，并告知应前往的 redis 实例地址和端口。&lt;/p&gt;
&lt;p&gt;redis-cli 客户端提供了 –c 参数实现自动重定向，如 redis-cli -c –p 6379 登入后，再录入、查询键值对可以自动重定向。&lt;/p&gt;
&lt;p&gt;在集群中，不在一个 slot 下的键值，是不能使用 mget,mset 等多键操作。但是可以通过 {组名} 来定义组的概念，从而实现多键操作，redis 会使用组名来计算对应的 slot 值。如 &lt;code&gt;mset k1&amp;#123;cust&amp;#125; v1  k2&amp;#123;cust&amp;#125; v2 k3&amp;#123;cust&amp;#125; v3 k4&amp;#123;cust&amp;#125; v4&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;故障恢复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#故障恢复&#34;&gt;#&lt;/a&gt; 故障恢复&lt;/h3&gt;
&lt;p&gt;如果主节点下线？从节点能否自动升为主节点？15 秒超时后，从节点升为主节点。&lt;/p&gt;
&lt;p&gt;主节点恢复后，主从关系会如何？主节点回来变成从机。&lt;/p&gt;
&lt;p&gt;如果所有某一段插槽的主从节点都宕掉，redis 服务是否还能继续？&lt;/p&gt;
&lt;p&gt;如果配置文件中 cluster-require-full-coverage 为 yes ，那么 ，整个集群都挂掉，如果为 no ，那么，只是该段插槽数据全都不能使用，也无法存储。&lt;/p&gt;
&lt;h3 id=&#34;集群好处&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群好处&#34;&gt;#&lt;/a&gt; 集群好处&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;实现扩容&lt;/li&gt;
&lt;li&gt;分摊压力&lt;/li&gt;
&lt;li&gt;无中心化配置相对简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集群不足&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群不足&#34;&gt;#&lt;/a&gt; 集群不足&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不支持多键操作&lt;/li&gt;
&lt;li&gt;多键的 Redis 事务是不被支持的&lt;/li&gt;
&lt;li&gt;lua 脚本不被支持。&lt;/li&gt;
&lt;li&gt;由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分 #的方案想要迁移至 redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis应用问题及解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis应用问题及解决&#34;&gt;#&lt;/a&gt; Redis 应用问题及解决&lt;/h2&gt;
&lt;h3 id=&#34;1-缓存穿透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-缓存穿透&#34;&gt;#&lt;/a&gt; 1. 缓存穿透&lt;/h3&gt;
&lt;h4 id=&#34;问题描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题描述&#34;&gt;#&lt;/a&gt; 问题描述&lt;/h4&gt;
&lt;p&gt;key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库（频繁进行很多非正常的 url 访问）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221015131449370.png&#34; alt=&#34;image-20221015131449370&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;缓存穿透现象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存穿透现象&#34;&gt;#&lt;/a&gt; 缓存穿透现象&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;应用服务器压力变大&lt;/li&gt;
&lt;li&gt;redis 命中率降低&lt;/li&gt;
&lt;li&gt;一直查询数据库，使得数据库压力太大而压垮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。&lt;/p&gt;
&lt;h4 id=&#34;解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;对空值缓存&lt;/strong&gt;：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置可访问的名单（白名单）&lt;/strong&gt;：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;采用布隆过滤器&lt;/strong&gt;：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进行实时监控&lt;/strong&gt;：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;缓存击穿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存击穿&#34;&gt;#&lt;/a&gt; 缓存击穿&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题描述-2&#34;&gt;#&lt;/a&gt; 问题描述&lt;/h4&gt;
&lt;p&gt;key 对应的数据存在，但在 redis 中过期，此时若有&lt;strong&gt;大量并发请求&lt;/strong&gt;过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。&lt;br /&gt;
&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221013172834245.png&#34; alt=&#34;image-20221013172834245&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;缓存击穿现象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存击穿现象&#34;&gt;#&lt;/a&gt; 缓存击穿现象&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据库访问压力瞬时增加，数据库崩溃&lt;/li&gt;
&lt;li&gt;redis 里面没有出现大量 key 过期&lt;/li&gt;
&lt;li&gt;redis 正常运行&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;解决方案-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案-2&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;p&gt;key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。这个时候，需要考虑缓存被 “击穿” 的问题，可以通过一下方案解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实时调整：现场监控哪些数据热门，实时调整 key 的过期时长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用锁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。&lt;/li&gt;
&lt;li&gt;先使用某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key，&lt;em&gt;就是设置一个锁&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；&lt;/li&gt;
&lt;li&gt;当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221015132311885.png&#34; alt=&#34;使用锁流程&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;缓存雪崩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓存雪崩&#34;&gt;#&lt;/a&gt; 缓存雪崩&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题描述-3&#34;&gt;#&lt;/a&gt; 问题描述&lt;/h4&gt;
&lt;p&gt;key 对应的数据存在，但在 redis 中过期，此时若有&lt;strong&gt;大量并发请求&lt;/strong&gt;过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。缓存失效时的雪崩效应对底层系统的冲击非常可怕！&lt;/p&gt;
&lt;p&gt;缓存雪崩与缓存击穿的&lt;strong&gt;区别在于这里针对很多 key 缓存，前者则是某一个 key&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221015132819943.png&#34; alt=&#34;image-20221015132819943&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;解决方案-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案-3&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;构建多级缓存架构&lt;/strong&gt;：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用锁或队列&lt;/strong&gt;：用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置过期标志更新缓存&lt;/strong&gt;：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将缓存失效时间分散开&lt;/strong&gt;：比如我们可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分布式锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式锁&#34;&gt;#&lt;/a&gt; 分布式锁&lt;/h3&gt;
&lt;h4 id=&#34;问题描述-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题描述-4&#34;&gt;#&lt;/a&gt; 问题描述&lt;/h4&gt;
&lt;p&gt;随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！&lt;/p&gt;
&lt;h4 id=&#34;常用实现方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用实现方案&#34;&gt;#&lt;/a&gt; 常用实现方案&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;基于数据库实现分布式锁&lt;/li&gt;
&lt;li&gt;基于缓存（Redis 等）&lt;/li&gt;
&lt;li&gt;基于 Zookeeper&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中通过 redis 实现性能最高，通过 zookeeper 实现可靠性最高。&lt;/p&gt;
&lt;h4 id=&#34;redis实现通过setnx-实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis实现通过setnx-实现&#34;&gt;#&lt;/a&gt; Redis 实现（通过 setnx 实现）&lt;/h4&gt;
&lt;p&gt;只在键不存在时，才对键进行设置操作 (SET key value NX 效果等同于 SETNX key value)。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221015133725964.png&#34; alt=&#34;image-20221015133725964&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置锁的过期时间，防止发生死锁&lt;/li&gt;
&lt;li&gt;setnx 获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁，防止误删&lt;/li&gt;
&lt;li&gt;需要保证删除锁操作的原子性，可使用 LUA 脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;redis6新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis6新特性&#34;&gt;#&lt;/a&gt; Redis6 新特性&lt;/h2&gt;
&lt;h3 id=&#34;acl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#acl&#34;&gt;#&lt;/a&gt; ACL&lt;/h3&gt;
&lt;p&gt;Redis ACL 是 Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。在 Redis 5 版本之前，Redis 安全规则只有密码控制，还有通过 rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供 ACL 的功能对用户进行更细粒度的权限控制 ：&lt;/p&gt;
&lt;p&gt;（1）接入权限：用户名和密码&lt;/p&gt;
&lt;p&gt;（2）可以执行的命令&lt;/p&gt;
&lt;p&gt;（3）可以操作的 KEY&lt;/p&gt;
&lt;h3 id=&#34;io多线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io多线程&#34;&gt;#&lt;/a&gt; IO 多线程&lt;/h3&gt;
&lt;p&gt;Redis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/Li-Changwu/image/redis/image-20221015134757872.png&#34; alt=&#34;image-20221015134757872&#34; /&gt;&lt;/p&gt;
&lt;p&gt;另外，多线程 IO 默认也是不开启的，需要再配置文件中配置：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;io-threads-do-reads  &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;io-threads &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>
